/** BEGIN_INPUT_DEFINITION *********************************************
 *
 * All specifications as seen by the parser.
 *
 * Do not edit - automatically generated.
 */

/**********************************************************
 * Dump of all structures:
 */

ADC_DATA()
{
  UINT32 adc_data NOENCODE
  {
     0_11: adc;
       12: overflow;
       13: underthreshold;
    14_15: unused;
    16_20: channel;
    21_23: unused2;
    24_26: 0;
    27_31: geo;
  }
}

BARRIER()
{
  UINT32 barrier NOENCODE
  {
     0_31: ba = MATCH(0xbabababa);
  }
}

DUMMY()
{
  UINT32 no NOENCODE;
}

external EXT_AIDA()
;

external EXT_FATIMA_TAMEX()
;

external EXT_FATIMA_VME()
;

external EXT_FRS(procid,type,subtype)
;

external EXT_GERMANIUM()
;

external EXT_PLASTIC()
;

external EXT_PLASTIC_TP()
;

SKIP(n)
{
  list(0<=i<n)
  {
    UINT32 skip NOENCODE;
  }
}

TAMEX4_EPOCH_DATA(sfp,card,time_coarse,time_fine,time_edge,time_channel,
                  time_epoch)
{
  MEMBER(DATA12 time_coarse[512] NO_INDEX_LIST);
  MEMBER(DATA12 time_fine[512] NO_INDEX_LIST);
  MEMBER(DATA12 time_edge[512] NO_INDEX_LIST);
  MEMBER(DATA12 time_channel[512] NO_INDEX_LIST);
  MEMBER(DATA32 time_epoch[512] NO_INDEX_LIST);
  UINT32 data NOENCODE
  {
     0_27: epoch;
       28: reserved;
    29_31: 3;
    ENCODE(time_coarse APPEND_LIST,(value=0));
    ENCODE(time_fine APPEND_LIST,(value=0));
    ENCODE(time_edge APPEND_LIST,(value=0));
    ENCODE(time_channel APPEND_LIST,(value=0));
    ENCODE(time_epoch APPEND_LIST,(value=epoch));
  }
}

TAMEX4_HEADER()
{
  MEMBER(DATA16 post_trig_ns[64] NO_INDEX_LIST);
  MEMBER(DATA16 pre_trig_ns[64] NO_INDEX_LIST);
  UINT32 trigger_window NOENCODE
  {
     0_15: post_trig_ns;
    16_31: pre_trig_ns;
    ENCODE(post_trig_ns APPEND_LIST,(value=post_trig_ns));
    ENCODE(pre_trig_ns APPEND_LIST,(value=pre_trig_ns));
  }
}

TAMEX4_PADDING()
{
  UINT32 padding NOENCODE
  {
     0_11: counter;
    12_19: index;
    20_31: 0xadd;
  }
}

TAMEX4_SFP(sfp,card)
{
  MEMBER(DATA12 time_coarse[512] NO_INDEX_LIST);
  MEMBER(DATA12 time_fine[512] NO_INDEX_LIST);
  MEMBER(DATA12 time_edge[512] NO_INDEX_LIST);
  MEMBER(DATA12 time_channel[512] NO_INDEX_LIST);
  MEMBER(DATA32 time_epoch[512] NO_INDEX_LIST);
  UINT32 indicator NOENCODE
  {
     0_07: 52;
     8_11: trigger_type;
    12_15: sfp = MATCH(sfp);
    16_23: card = MATCH(card);
    24_31: 0;
  }
  MATCH_END;
  UINT32 data_size NOENCODE
  {
     0_31: bytes;
  }
  UINT32 tdc_header NOENCODE
  {
     0_15: lec;
       16: buf_no;
    17_19: reserved;
    20_23: trigger_type;
    24_31: 170;
  }
  list(0<=i<((data_size.bytes / 4) - 3))
  {
    select several
    {
      time = TAMEX4_TIME_DATA(sfp=sfp,card=card,time_coarse=time_coarse,
                              time_fine=time_fine,time_edge=time_edge,
                              time_channel=time_channel,time_epoch=time_epoch);
      epoch = TAMEX4_EPOCH_DATA(sfp=sfp,card=card,time_coarse=time_coarse,
                                time_fine=time_fine,time_edge=time_edge,
                                time_channel=time_channel,time_epoch=time_epoch);
    }
  }
  UINT32 error_bits NOENCODE
  {
     0_23: bits;
    24_31: 238;
  }
  UINT32 trailer NOENCODE
  {
     0_15: lec;
       16: buf_no;
    17_19: reserved;
    20_23: trigger_type;
    24_31: 187;
  }
}

TAMEX4_TIME_DATA(sfp,card,time_coarse,time_fine,time_edge,time_channel,
                 time_epoch)
{
  MEMBER(DATA12 time_coarse[512] NO_INDEX_LIST);
  MEMBER(DATA12 time_fine[512] NO_INDEX_LIST);
  MEMBER(DATA12 time_edge[512] NO_INDEX_LIST);
  MEMBER(DATA12 time_channel[512] NO_INDEX_LIST);
  MEMBER(DATA32 time_epoch[512] NO_INDEX_LIST);
  UINT32 data NOENCODE
  {
     0_10: coarse;
       11: is_leading;
    12_21: fine;
    22_28: channel;
    29_31: type = CHECK(4);
    ENCODE(time_coarse APPEND_LIST,(value=coarse));
    ENCODE(time_fine APPEND_LIST,(value=fine));
    ENCODE(time_edge APPEND_LIST,(value=is_leading));
    ENCODE(time_channel APPEND_LIST,(value=channel));
    ENCODE(time_epoch APPEND_LIST,(value=0));
  }
}

TAMEX_SFP(sfp)
{
  select several
  {
    card[0] = TAMEX4_SFP(sfp=sfp,card=0);
    card[1] = TAMEX4_SFP(sfp=sfp,card=1);
    card[2] = TAMEX4_SFP(sfp=sfp,card=2);
    card[3] = TAMEX4_SFP(sfp=sfp,card=3);
    card[4] = TAMEX4_SFP(sfp=sfp,card=4);
  }
}

TDC_DATA(data,channel,leadOrTrail)
{
  MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(32));
  MEMBER(DATA8 channel[32] NO_INDEX_LIST);
  MEMBER(DATA8 leadOrTrail[32] NO_INDEX_LIST);
  MEMBER(DATA8 multihit);
  UINT32 tdc_data NOENCODE
  {
     0_20: value;
    21_25: chn;
       26: lot;
    27_31: 0;
    ENCODE(data[chn],(value=value));
    ENCODE(channel APPEND_LIST,(value=chn));
    ENCODE(leadOrTrail APPEND_LIST,(value=lot));
  }
}

TDC_ERROR()
{
  UINT32 tdc_err NOENCODE
  {
     0_14: error_flags;
    15_23: unused1;
    24_25: tdc;
       26: unused2;
    27_31: 4;
  }
}

TDC_HEADER()
{
  UINT32 tdc_header NOENCODE
  {
     0_11: bunch_id;
    12_23: event_id;
    24_25: tdc;
       26: unused;
    27_31: 1;
  }
}

TDC_TRAILER()
{
  UINT32 tdc_trailer NOENCODE
  {
     0_11: word_count;
    12_23: event_id;
    24_25: tdc;
       26: unused;
    27_31: 3;
  }
}

TIMESTAMP_WHITERABBIT(id)
{
  MEMBER(DATA12 subsystem_id);
  MEMBER(DATA16 t1);
  MEMBER(DATA16 t2);
  MEMBER(DATA16 t3);
  MEMBER(DATA16 t4);
  UINT32 header NOENCODE
  {
     0_11: id = MATCH(id);
    12_15: 0;
       16: error_bit;
    17_31: 0;
    ENCODE(subsystem_id,(value=id));
  }
  UINT32 d1 NOENCODE
  {
     0_15: t1;
    16_31: 0x3e1;
    ENCODE(t1,(value=t1));
  }
  UINT32 d2 NOENCODE
  {
     0_15: t2;
    16_31: 0x4e1;
    ENCODE(t2,(value=t2));
  }
  UINT32 d3 NOENCODE
  {
     0_15: t3;
    16_31: 0x5e1;
    ENCODE(t3,(value=t3));
  }
  UINT32 d4 NOENCODE
  {
     0_15: t4;
    16_31: 0x6e1;
    ENCODE(t4,(value=t4));
  }
}

TIMESTAMP_WHITERABBIT_EXTENDED(id)
{
  MEMBER(DATA16 subsystem_id);
  MEMBER(DATA16 t1);
  MEMBER(DATA16 t2);
  MEMBER(DATA16 t3);
  MEMBER(DATA16 t4);
  UINT32 header NOENCODE
  {
     0_12: id = MATCH(id);
    13_15: 0;
       16: error_bit;
    17_31: 0;
    ENCODE(subsystem_id,(value=id));
  }
  UINT32 d1 NOENCODE
  {
     0_15: t1;
    16_31: 0x3e1;
    ENCODE(t1,(value=t1));
  }
  UINT32 d2 NOENCODE
  {
     0_15: t2;
    16_31: 0x4e1;
    ENCODE(t2,(value=t2));
  }
  UINT32 d3 NOENCODE
  {
     0_15: t3;
    16_31: 0x5e1;
    ENCODE(t3,(value=t3));
  }
  UINT32 d4 NOENCODE
  {
     0_15: t4;
    16_31: 0x6e1;
    ENCODE(t4,(value=t4));
  }
}

VME_CAEN_V1290_FRS()
{
  MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(32));
  MEMBER(DATA8 channel[32] NO_INDEX_LIST);
  MEMBER(DATA8 leadOrTrail[32] NO_INDEX_LIST);
  UINT32 header NOENCODE
  {
     0_04: geo;
     5_26: event_count;
    27_31: 8;
  }
  select several
  {
    tdc_header = TDC_HEADER();
    measurement = TDC_DATA(data=data,channel=channel,leadOrTrail=leadOrTrail);
    tdc_error = TDC_ERROR();
    tdc_trailer = TDC_TRAILER();
  }
  optional UINT32 ext_time_tag NOENCODE
  {
     0_26: time_tag;
    27_31: 17;
  }
  UINT32 trailer NOENCODE
  {
     0_04: geo;
     5_20: word_count;
    21_23: unused;
       24: tdc_error;
       25: overflow;
       26: trigger_lost;
    27_31: 16;
  }
}

VME_CAEN_V792_FRS()
{
  UINT32 header NOENCODE
  {
     0_07: unused;
     8_13: cnt;
    14_15: 0;
    16_23: crate;
    24_26: 2;
    27_31: geo;
  }
  several UINT32 adc_data NOENCODE
  {
     0_11: adc;
       12: overflow;
       13: underthreshold;
    14_15: unused;
    16_20: channel;
    21_23: unused2;
    24_26: 0;
    27_31: geo;
  }
  UINT32 eob NOENCODE
  {
     0_23: eventcounter;
    24_26: 4;
    27_31: geo;
  }
}

VME_CAEN_V830_FRS()
{
  UINT32 header NOENCODE
  {
     0_15: trigger_number;
    16_17: ts;
    18_23: nwords;
    24_25: unused;
       26: 1;
    27_31: geo;
  }
  list(0<=i<header.nwords)
  {
    UINT32 data_word NOENCODE
    {
       0_31: data;
    }
  }
}

WR_MULTI()
{
  MEMBER(DATA32 time_hi);
  MEMBER(DATA32 time_lo);
  UINT32 hi NOENCODE
  {
     0_31: time;
    ENCODE(time_hi,(value=time));
  }
  UINT32 lo NOENCODE
  {
     0_31: time;
    ENCODE(time_lo,(value=time));
  }
}

SUBEVENT(aida_subev)
{
  if(0)
  {
    ts = TIMESTAMP_WHITERABBIT(id=0x700);
    external data = EXT_AIDA();
  }
  else
  {
    select several
    {
      dummy = DUMMY();
    }
  }
}

SUBEVENT(fatima_tamex_subev)
{
  if(0)
  {
    ts = TIMESTAMP_WHITERABBIT_EXTENDED(id=0x1600);
    external data = EXT_FATIMA_TAMEX();
  }
  else
  {
    select several
    {
      dummy = DUMMY();
    }
  }
}

SUBEVENT(fatima_vme_subev)
{
  if(0)
  {
    ts = TIMESTAMP_WHITERABBIT_EXTENDED(id=0x1500);
    external data = EXT_FATIMA_VME();
  }
  else
  {
    select several
    {
      dummy = DUMMY();
    }
  }
}

SUBEVENT(frs_crate_subev)
{
  if(0)
  {
    external data = EXT_FRS(procid=30,type=12,subtype=1);
  }
  else
  {
    dummy = DUMMY();
  }
}

SUBEVENT(frs_main_crate_subev)
{
  if(0)
  {
    external data = EXT_FRS(procid=10,type=12,subtype=1);
  }
  else
  {
    select several
    {
      dummy = DUMMY();
    }
  }
}

SUBEVENT(frs_tof_crate_subev)
{
  if(0)
  {
    external data = EXT_FRS(procid=35,type=12,subtype=1);
  }
  else
  {
    dummy = DUMMY();
  }
}

SUBEVENT(frs_tpat_subev)
{
  if(0)
  {
    external data = EXT_FRS(procid=10,type=36,subtype=0xe10);
  }
  else
  {
    select several
    {
      dummy = DUMMY();
    }
  }
}

SUBEVENT(frs_tpc_crate_subev)
{
  if(0)
  {
    external data = EXT_FRS(procid=20,type=12,subtype=1);
  }
  else
  {
    dummy = DUMMY();
  }
}

SUBEVENT(frs_whiterabbit_subev)
{
  if(0)
  {
    ts = TIMESTAMP_WHITERABBIT(id=0x100);
  }
  else
  {
    select several
    {
      dummy = DUMMY();
    }
  }
}

SUBEVENT(germanium_subev)
{
  if(0)
  {
    ts = TIMESTAMP_WHITERABBIT(id=0x400);
    external data = EXT_GERMANIUM();
  }
  else
  {
    select several
    {
      dummy = DUMMY();
    }
  }
}

SUBEVENT(plastic_subev)
{
  if(1)
  {
    ts = TIMESTAMP_WHITERABBIT(id=0x500);
    if(0)
    {
      external data_tp = EXT_PLASTIC_TP();
    }
    else
    {
      header = TAMEX4_HEADER();
      select several
      {
        padding = TAMEX4_PADDING();
      }
      select several
      {
        crate[0] = TAMEX_SFP(sfp=0);
      }
    }
  }
  else
  {
    select several
    {
      dummy = DUMMY();
    }
  }
}

/**********************************************************
 * The event definition:
 */

EVENT
{
  plastic = plastic_subev(type=10,subtype=1,procid=80,control=20,
                          subcrate=0);
  ignore_unknown_subevent;
}

/**********************************************************
 * The sticky_event definition:
 */

/**********************************************************
 * Signal name mappings:
 */

/**********************************************************/

/** END_INPUT_DEFINITION **********************************************/
