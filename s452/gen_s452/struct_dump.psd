
/** BEGIN_INPUT_DEFINITION *********************************************
 *
 * All specifications as seen by the parser.
 *
 * Do not edit - automatically generated.
 */

/**********************************************************
 * Dump of all structures:
 */

class AIDA_INFO
{
  ;
} ;
class AIDA_ADC
{
  ;
} ;
class AIDA_MODULE
{
  AIDA_INFO i;
  AIDA_ADC d;
} ;
class AIDA
{
  raw_list_ii_zero_suppress<DATA8,DATA8,13000> module;
  raw_list_ii_zero_suppress<DATA8,DATA8,13000> channel;
  raw_list_ii_zero_suppress<DATA8,DATA8,13000> info;
  raw_list_ii_zero_suppress<DATA16,DATA16,13000> adc;
  raw_list_ii_zero_suppress<DATA32,DATA32,13000> ts_low;
  raw_list_ii_zero_suppress<DATA32,DATA32,13000> ts_med;
  raw_list_ii_zero_suppress<DATA32,DATA32,13000> ts_high;
  AIDA_MODULE mod[12];
} ;
class DUMMY
{
  ;
} ;
class FATIMA_QDC
{
  ;
} ;
class FATIMA_SCALER
{
  raw_list_zero_suppress<DATA32,DATA32,16> scalers;
} ;
class FATIMA_TAMEX
{
  DUMMY dummy;
} ;
class FATIMA_TDC
{
  ;
} ;
class FATIMA_VME
{
  FATIMA_SCALER scaler;
  DUMMY dummy;
} ;
class FRS
{
  DUMMY dummy;
} ;
class FRS_FRS
{
  raw_list_zero_suppress<DATA32,DATA32,32> scalers;
} ;
class FRS_MAIN
{
  raw_list_zero_suppress<DATA32,DATA32,32> scalers;
} ;
class TIMESTAMP_WHITERABBIT
{
  DATA12 subsystem_id;
  DATA16 t1;
  DATA16 t2;
  DATA16 t3;
  DATA16 t4;
} ;
class TIMESTAMP_WHITERABBIT_EXTENDED
{
  DATA16 subsystem_id;
  DATA16 t1;
  DATA16 t2;
  DATA16 t3;
  DATA16 t4;
} ;
class TRLOII_TPAT
{
  DATA32 n;
  raw_list_ii_zero_suppress<DATA32,DATA32,170> tpat;
  raw_list_ii_zero_suppress<DATA8,DATA8,170> trig;
  raw_list_ii_zero_suppress<DATA32,DATA32,170> ts_lo;
  raw_list_ii_zero_suppress<DATA32,DATA32,170> ts_hi;
} ;
class WR_MULTI
{
  DATA32 time_hi;
  DATA32 time_lo;
} ;
class aida_subev : public unpack_subevent_base
{
  TIMESTAMP_WHITERABBIT ts;
  EXT_AIDA data;
} ;
class fatima_tamex_subev : public unpack_subevent_base
{
  TIMESTAMP_WHITERABBIT_EXTENDED ts;
  EXT_FATIMA_TAMEX data;
} ;
class fatima_vme_subev : public unpack_subevent_base
{
  TIMESTAMP_WHITERABBIT_EXTENDED ts;
  EXT_FATIMA_VME data;
} ;
class frs_frs_subev : public unpack_subevent_base
{
  FRS_FRS subev;
} ;
class frs_main_subev : public unpack_subevent_base
{
  FRS_MAIN subev;
} ;
class frs_subev1 : public unpack_subevent_base
{
  TIMESTAMP_WHITERABBIT ts;
  FRS subev;
} ;
class frs_subev4 : public unpack_subevent_base
{
  TIMESTAMP_WHITERABBIT ts;
  FRS subev;
} ;
class frs_subev6 : public unpack_subevent_base
{
  TIMESTAMP_WHITERABBIT ts;
  FRS subev;
} ;
class frs_tpat_subev : public unpack_subevent_base
{
  DUMMY dummy;
  TRLOII_TPAT tpat;
} ;
class germanium_subev : public unpack_subevent_base
{
  TIMESTAMP_WHITERABBIT ts;
  EXT_GERMANIUM data;
} ;
class plastic_subev : public unpack_subevent_base
{
  TIMESTAMP_WHITERABBIT ts;
} ;
class unpack_event : public unpack_event_base
{
  germanium_subev germanium;
  fatima_vme_subev fatima_vme;
  fatima_tamex_subev fatima_tamex;
  aida_subev aida;
  frs_main_subev frs_main;
  frs_tpat_subev frs_tpat;
  frs_frs_subev frs_frs;
} ;
class unpack_sticky_event : public unpack_sticky_event_base
{
  ;
} ;
/**********************************************************/

/** END_INPUT_DEFINITION **********************************************/


/** BEGIN_MIRROR_STRUCT ************************************************
 *
 * Mirror (1 to 1) structure.
 *
 * Do not edit - automatically generated.
 */

#include "gen/default_mirror_define.hh"

#ifndef USER_DEF_AIDA_INFO
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(AIDA_INFO)
{
public:
  STRUCT_MIRROR_FCNS_DECL(AIDA_INFO);
};
#endif//USER_DEF_AIDA_INFO

#ifndef USER_DEF_AIDA_ADC
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(AIDA_ADC)
{
public:
  STRUCT_MIRROR_FCNS_DECL(AIDA_ADC);
};
#endif//USER_DEF_AIDA_ADC

#ifndef USER_DEF_AIDA_MODULE
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(AIDA_MODULE)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(i);
  STRUCT_MIRROR_TYPE(AIDA_INFO) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(i);
  STRUCT_MIRROR_ITEM_CTRL(d);
  STRUCT_MIRROR_TYPE(AIDA_ADC) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(d);
  STRUCT_MIRROR_FCNS_DECL(AIDA_MODULE);
};
#endif//USER_DEF_AIDA_MODULE

#ifndef USER_DEF_AIDA
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(AIDA)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(module);
  STRUCT_MIRROR_TYPE(raw_list_ii_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA8),STRUCT_MIRROR_TEMPLATE_ARG(DATA8),13000> STRUCT_MIRROR_NAME(module);
  STRUCT_MIRROR_ITEM_CTRL(channel);
  STRUCT_MIRROR_TYPE(raw_list_ii_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA8),STRUCT_MIRROR_TEMPLATE_ARG(DATA8),13000> STRUCT_MIRROR_NAME(channel);
  STRUCT_MIRROR_ITEM_CTRL(info);
  STRUCT_MIRROR_TYPE(raw_list_ii_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA8),STRUCT_MIRROR_TEMPLATE_ARG(DATA8),13000> STRUCT_MIRROR_NAME(info);
  STRUCT_MIRROR_ITEM_CTRL(adc);
  STRUCT_MIRROR_TYPE(raw_list_ii_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA16),STRUCT_MIRROR_TEMPLATE_ARG(DATA16),13000> STRUCT_MIRROR_NAME(adc);
  STRUCT_MIRROR_ITEM_CTRL(ts_low);
  STRUCT_MIRROR_TYPE(raw_list_ii_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA32),STRUCT_MIRROR_TEMPLATE_ARG(DATA32),13000> STRUCT_MIRROR_NAME(ts_low);
  STRUCT_MIRROR_ITEM_CTRL(ts_med);
  STRUCT_MIRROR_TYPE(raw_list_ii_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA32),STRUCT_MIRROR_TEMPLATE_ARG(DATA32),13000> STRUCT_MIRROR_NAME(ts_med);
  STRUCT_MIRROR_ITEM_CTRL(ts_high);
  STRUCT_MIRROR_TYPE(raw_list_ii_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA32),STRUCT_MIRROR_TEMPLATE_ARG(DATA32),13000> STRUCT_MIRROR_NAME(ts_high);
  STRUCT_MIRROR_ITEM_CTRL(mod);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(mod__i0,,12);
  STRUCT_MIRROR_TYPE(AIDA_MODULE) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(mod[12]);
  STRUCT_MIRROR_FCNS_DECL(AIDA);
};
#endif//USER_DEF_AIDA

#ifndef USER_DEF_DUMMY
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(DUMMY)
{
public:
  STRUCT_MIRROR_FCNS_DECL(DUMMY);
};
#endif//USER_DEF_DUMMY

#ifndef USER_DEF_FATIMA_QDC
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(FATIMA_QDC)
{
public:
  STRUCT_MIRROR_FCNS_DECL(FATIMA_QDC);
};
#endif//USER_DEF_FATIMA_QDC

#ifndef USER_DEF_FATIMA_SCALER
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(FATIMA_SCALER)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(scalers);
  STRUCT_MIRROR_TYPE(raw_list_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA32),STRUCT_MIRROR_TEMPLATE_ARG(DATA32),16> STRUCT_MIRROR_NAME(scalers);
  STRUCT_MIRROR_FCNS_DECL(FATIMA_SCALER);
};
#endif//USER_DEF_FATIMA_SCALER

#ifndef USER_DEF_FATIMA_TAMEX
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(FATIMA_TAMEX)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(dummy);
  STRUCT_MIRROR_TYPE(DUMMY) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy);
  STRUCT_MIRROR_FCNS_DECL(FATIMA_TAMEX);
};
#endif//USER_DEF_FATIMA_TAMEX

#ifndef USER_DEF_FATIMA_TDC
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(FATIMA_TDC)
{
public:
  STRUCT_MIRROR_FCNS_DECL(FATIMA_TDC);
};
#endif//USER_DEF_FATIMA_TDC

#ifndef USER_DEF_FATIMA_VME
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(FATIMA_VME)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(scaler);
  STRUCT_MIRROR_TYPE(FATIMA_SCALER) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(scaler);
  STRUCT_MIRROR_ITEM_CTRL(dummy);
  STRUCT_MIRROR_TYPE(DUMMY) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy);
  STRUCT_MIRROR_FCNS_DECL(FATIMA_VME);
};
#endif//USER_DEF_FATIMA_VME

#ifndef USER_DEF_FRS
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(FRS)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(dummy);
  STRUCT_MIRROR_TYPE(DUMMY) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy);
  STRUCT_MIRROR_FCNS_DECL(FRS);
};
#endif//USER_DEF_FRS

#ifndef USER_DEF_FRS_FRS
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(FRS_FRS)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(scalers);
  STRUCT_MIRROR_TYPE(raw_list_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA32),STRUCT_MIRROR_TEMPLATE_ARG(DATA32),32> STRUCT_MIRROR_NAME(scalers);
  STRUCT_MIRROR_FCNS_DECL(FRS_FRS);
};
#endif//USER_DEF_FRS_FRS

#ifndef USER_DEF_FRS_MAIN
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(FRS_MAIN)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(scalers);
  STRUCT_MIRROR_TYPE(raw_list_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA32),STRUCT_MIRROR_TEMPLATE_ARG(DATA32),32> STRUCT_MIRROR_NAME(scalers);
  STRUCT_MIRROR_FCNS_DECL(FRS_MAIN);
};
#endif//USER_DEF_FRS_MAIN

#ifndef USER_DEF_TIMESTAMP_WHITERABBIT
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(TIMESTAMP_WHITERABBIT)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(subsystem_id);
  STRUCT_MIRROR_TYPE(DATA12) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(subsystem_id);
  STRUCT_MIRROR_ITEM_CTRL(t1);
  STRUCT_MIRROR_TYPE(DATA16) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(t1);
  STRUCT_MIRROR_ITEM_CTRL(t2);
  STRUCT_MIRROR_TYPE(DATA16) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(t2);
  STRUCT_MIRROR_ITEM_CTRL(t3);
  STRUCT_MIRROR_TYPE(DATA16) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(t3);
  STRUCT_MIRROR_ITEM_CTRL(t4);
  STRUCT_MIRROR_TYPE(DATA16) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(t4);
  STRUCT_MIRROR_FCNS_DECL(TIMESTAMP_WHITERABBIT);
};
#endif//USER_DEF_TIMESTAMP_WHITERABBIT

#ifndef USER_DEF_TIMESTAMP_WHITERABBIT_EXTENDED
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(TIMESTAMP_WHITERABBIT_EXTENDED)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(subsystem_id);
  STRUCT_MIRROR_TYPE(DATA16) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(subsystem_id);
  STRUCT_MIRROR_ITEM_CTRL(t1);
  STRUCT_MIRROR_TYPE(DATA16) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(t1);
  STRUCT_MIRROR_ITEM_CTRL(t2);
  STRUCT_MIRROR_TYPE(DATA16) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(t2);
  STRUCT_MIRROR_ITEM_CTRL(t3);
  STRUCT_MIRROR_TYPE(DATA16) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(t3);
  STRUCT_MIRROR_ITEM_CTRL(t4);
  STRUCT_MIRROR_TYPE(DATA16) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(t4);
  STRUCT_MIRROR_FCNS_DECL(TIMESTAMP_WHITERABBIT_EXTENDED);
};
#endif//USER_DEF_TIMESTAMP_WHITERABBIT_EXTENDED

#ifndef USER_DEF_TRLOII_TPAT
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(TRLOII_TPAT)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(n);
  STRUCT_MIRROR_TYPE(DATA32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(n);
  STRUCT_MIRROR_ITEM_CTRL(tpat);
  STRUCT_MIRROR_TYPE(raw_list_ii_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA32),STRUCT_MIRROR_TEMPLATE_ARG(DATA32),170> STRUCT_MIRROR_NAME(tpat);
  STRUCT_MIRROR_ITEM_CTRL(trig);
  STRUCT_MIRROR_TYPE(raw_list_ii_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA8),STRUCT_MIRROR_TEMPLATE_ARG(DATA8),170> STRUCT_MIRROR_NAME(trig);
  STRUCT_MIRROR_ITEM_CTRL(ts_lo);
  STRUCT_MIRROR_TYPE(raw_list_ii_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA32),STRUCT_MIRROR_TEMPLATE_ARG(DATA32),170> STRUCT_MIRROR_NAME(ts_lo);
  STRUCT_MIRROR_ITEM_CTRL(ts_hi);
  STRUCT_MIRROR_TYPE(raw_list_ii_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA32),STRUCT_MIRROR_TEMPLATE_ARG(DATA32),170> STRUCT_MIRROR_NAME(ts_hi);
  STRUCT_MIRROR_FCNS_DECL(TRLOII_TPAT);
};
#endif//USER_DEF_TRLOII_TPAT

#ifndef USER_DEF_WR_MULTI
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(WR_MULTI)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(time_hi);
  STRUCT_MIRROR_TYPE(DATA32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(time_hi);
  STRUCT_MIRROR_ITEM_CTRL(time_lo);
  STRUCT_MIRROR_TYPE(DATA32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(time_lo);
  STRUCT_MIRROR_FCNS_DECL(WR_MULTI);
};
#endif//USER_DEF_WR_MULTI

#ifndef USER_DEF_aida_subev
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(aida_subev) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(ts);
  STRUCT_MIRROR_TYPE(TIMESTAMP_WHITERABBIT) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(ts);
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_TYPE(EXT_AIDA) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(data);
  STRUCT_MIRROR_FCNS_DECL(aida_subev);
};
#endif//USER_DEF_aida_subev

#ifndef USER_DEF_fatima_tamex_subev
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(fatima_tamex_subev) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(ts);
  STRUCT_MIRROR_TYPE(TIMESTAMP_WHITERABBIT_EXTENDED) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(ts);
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_TYPE(EXT_FATIMA_TAMEX) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(data);
  STRUCT_MIRROR_FCNS_DECL(fatima_tamex_subev);
};
#endif//USER_DEF_fatima_tamex_subev

#ifndef USER_DEF_fatima_vme_subev
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(fatima_vme_subev) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(ts);
  STRUCT_MIRROR_TYPE(TIMESTAMP_WHITERABBIT_EXTENDED) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(ts);
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_TYPE(EXT_FATIMA_VME) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(data);
  STRUCT_MIRROR_FCNS_DECL(fatima_vme_subev);
};
#endif//USER_DEF_fatima_vme_subev

#ifndef USER_DEF_frs_frs_subev
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(frs_frs_subev) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(subev);
  STRUCT_MIRROR_TYPE(FRS_FRS) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(subev);
  STRUCT_MIRROR_FCNS_DECL(frs_frs_subev);
};
#endif//USER_DEF_frs_frs_subev

#ifndef USER_DEF_frs_main_subev
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(frs_main_subev) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(subev);
  STRUCT_MIRROR_TYPE(FRS_MAIN) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(subev);
  STRUCT_MIRROR_FCNS_DECL(frs_main_subev);
};
#endif//USER_DEF_frs_main_subev

#ifndef USER_DEF_frs_subev1
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(frs_subev1) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(ts);
  STRUCT_MIRROR_TYPE(TIMESTAMP_WHITERABBIT) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(ts);
  STRUCT_MIRROR_ITEM_CTRL(subev);
  STRUCT_MIRROR_TYPE(FRS) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(subev);
  STRUCT_MIRROR_FCNS_DECL(frs_subev1);
};
#endif//USER_DEF_frs_subev1

#ifndef USER_DEF_frs_subev4
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(frs_subev4) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(ts);
  STRUCT_MIRROR_TYPE(TIMESTAMP_WHITERABBIT) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(ts);
  STRUCT_MIRROR_ITEM_CTRL(subev);
  STRUCT_MIRROR_TYPE(FRS) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(subev);
  STRUCT_MIRROR_FCNS_DECL(frs_subev4);
};
#endif//USER_DEF_frs_subev4

#ifndef USER_DEF_frs_subev6
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(frs_subev6) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(ts);
  STRUCT_MIRROR_TYPE(TIMESTAMP_WHITERABBIT) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(ts);
  STRUCT_MIRROR_ITEM_CTRL(subev);
  STRUCT_MIRROR_TYPE(FRS) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(subev);
  STRUCT_MIRROR_FCNS_DECL(frs_subev6);
};
#endif//USER_DEF_frs_subev6

#ifndef USER_DEF_frs_tpat_subev
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(frs_tpat_subev) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(dummy);
  STRUCT_MIRROR_TYPE(DUMMY) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy);
  STRUCT_MIRROR_ITEM_CTRL(tpat);
  STRUCT_MIRROR_TYPE(TRLOII_TPAT) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tpat);
  STRUCT_MIRROR_FCNS_DECL(frs_tpat_subev);
};
#endif//USER_DEF_frs_tpat_subev

#ifndef USER_DEF_germanium_subev
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(germanium_subev) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(ts);
  STRUCT_MIRROR_TYPE(TIMESTAMP_WHITERABBIT) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(ts);
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_TYPE(EXT_GERMANIUM) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(data);
  STRUCT_MIRROR_FCNS_DECL(germanium_subev);
};
#endif//USER_DEF_germanium_subev

#ifndef USER_DEF_plastic_subev
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(plastic_subev) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(ts);
  STRUCT_MIRROR_TYPE(TIMESTAMP_WHITERABBIT) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(ts);
  STRUCT_MIRROR_FCNS_DECL(plastic_subev);
};
#endif//USER_DEF_plastic_subev

#ifndef USER_DEF_unpack_event
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(unpack_event) : public STRUCT_MIRROR_BASE(unpack_event_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_event_base);
  STRUCT_MIRROR_ITEM_CTRL(germanium);
  STRUCT_MIRROR_TYPE(germanium_subev) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(germanium);
  STRUCT_MIRROR_ITEM_CTRL(fatima_vme);
  STRUCT_MIRROR_TYPE(fatima_vme_subev) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(fatima_vme);
  STRUCT_MIRROR_ITEM_CTRL(fatima_tamex);
  STRUCT_MIRROR_TYPE(fatima_tamex_subev) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(fatima_tamex);
  STRUCT_MIRROR_ITEM_CTRL(aida);
  STRUCT_MIRROR_TYPE(aida_subev) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(aida);
  STRUCT_MIRROR_ITEM_CTRL(frs_main);
  STRUCT_MIRROR_TYPE(frs_main_subev) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(frs_main);
  STRUCT_MIRROR_ITEM_CTRL(frs_tpat);
  STRUCT_MIRROR_TYPE(frs_tpat_subev) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(frs_tpat);
  STRUCT_MIRROR_ITEM_CTRL(frs_frs);
  STRUCT_MIRROR_TYPE(frs_frs_subev) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(frs_frs);
  STRUCT_MIRROR_FCNS_DECL(unpack_event);
};
#endif//USER_DEF_unpack_event

#ifndef USER_DEF_unpack_sticky_event
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(unpack_sticky_event) : public STRUCT_MIRROR_BASE(unpack_sticky_event_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_sticky_event_base);
  STRUCT_MIRROR_FCNS_DECL(unpack_sticky_event);
};
#endif//USER_DEF_unpack_sticky_event

#include "gen/default_mirror_undef.hh"


/** END_MIRROR_STRUCT *************************************************/


/** BEGIN_MIRROR_DECL_STRUCT *******************************************
 *
 * Mirror structure names.
 *
 * Do not edit - automatically generated.
 */

#include "gen/default_mirror_define.hh"

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(AIDA_INFO);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(AIDA_ADC);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(AIDA_MODULE);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(AIDA);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(DUMMY);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(FATIMA_QDC);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(FATIMA_SCALER);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(FATIMA_TAMEX);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(FATIMA_TDC);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(FATIMA_VME);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(FRS);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(FRS_FRS);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(FRS_MAIN);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(TIMESTAMP_WHITERABBIT);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(TIMESTAMP_WHITERABBIT_EXTENDED);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(TRLOII_TPAT);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(WR_MULTI);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(aida_subev);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(fatima_tamex_subev);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(fatima_vme_subev);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(frs_frs_subev);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(frs_main_subev);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(frs_subev1);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(frs_subev4);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(frs_subev6);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(frs_tpat_subev);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(germanium_subev);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(plastic_subev);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(unpack_event);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(unpack_sticky_event);

#include "gen/default_mirror_undef.hh"


/** END_MIRROR_DECL_STRUCT ********************************************/


/** BEGIN_FUNCTION_CALL_PER_MEMBER *************************************
 *
 * Recursive function calls per member.
 *
 * Do not edit - automatically generated.
 */

#include "gen/default_fcncall_define.hh"

#ifndef USER_DEF_AIDA_INFO
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(AIDA_INFO)::FCNCALL_NAME(AIDA_INFO)
{
  FCNCALL_INIT;
  FCNCALL_RET;
}
#endif//USER_DEF_AIDA_INFO

#ifndef USER_DEF_AIDA_ADC
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(AIDA_ADC)::FCNCALL_NAME(AIDA_ADC)
{
  FCNCALL_INIT;
  FCNCALL_RET;
}
#endif//USER_DEF_AIDA_ADC

#ifndef USER_DEF_AIDA_MODULE
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(AIDA_MODULE)::FCNCALL_NAME(AIDA_MODULE)
{
  FCNCALL_INIT;
  // AIDA_INFO i;
  {
  FCNCALL_SUBNAME("i");
  { FCNCALL_CALL_CTRL_WRAP(i,i.FCNCALL_CALL(i)); }
  FCNCALL_SUBNAME_END;
  }
  // AIDA_ADC d;
  {
  FCNCALL_SUBNAME("d");
  { FCNCALL_CALL_CTRL_WRAP(d,d.FCNCALL_CALL(d)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_AIDA_MODULE

#ifndef USER_DEF_AIDA
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(AIDA)::FCNCALL_NAME(AIDA)
{
  FCNCALL_INIT;
  // raw_list_ii_zero_suppress<DATA8,DATA8,13000> module;
  {
  FCNCALL_SUBNAME("module");
  { FCNCALL_CALL_CTRL_WRAP(module,module.FCNCALL_CALL(module)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_list_ii_zero_suppress<DATA8,DATA8,13000> channel;
  {
  FCNCALL_SUBNAME("channel");
  { FCNCALL_CALL_CTRL_WRAP(channel,channel.FCNCALL_CALL(channel)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_list_ii_zero_suppress<DATA8,DATA8,13000> info;
  {
  FCNCALL_SUBNAME("info");
  { FCNCALL_CALL_CTRL_WRAP(info,info.FCNCALL_CALL(info)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_list_ii_zero_suppress<DATA16,DATA16,13000> adc;
  {
  FCNCALL_SUBNAME("adc");
  { FCNCALL_CALL_CTRL_WRAP(adc,adc.FCNCALL_CALL(adc)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_list_ii_zero_suppress<DATA32,DATA32,13000> ts_low;
  {
  FCNCALL_SUBNAME("ts_low");
  { FCNCALL_CALL_CTRL_WRAP(ts_low,ts_low.FCNCALL_CALL(ts_low)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_list_ii_zero_suppress<DATA32,DATA32,13000> ts_med;
  {
  FCNCALL_SUBNAME("ts_med");
  { FCNCALL_CALL_CTRL_WRAP(ts_med,ts_med.FCNCALL_CALL(ts_med)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_list_ii_zero_suppress<DATA32,DATA32,13000> ts_high;
  {
  FCNCALL_SUBNAME("ts_high");
  { FCNCALL_CALL_CTRL_WRAP(ts_high,ts_high.FCNCALL_CALL(ts_high)); }
  FCNCALL_SUBNAME_END;
  }
  // AIDA_MODULE mod[12];
  {
  FCNCALL_SUBNAME("mod");
  FCNCALL_FOR(__i0,12)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(mod__i0,,__i0,mod[__i0].FCNCALL_CALL(mod[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_AIDA

#ifndef USER_DEF_DUMMY
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(DUMMY)::FCNCALL_NAME(DUMMY)
{
  FCNCALL_INIT;
  FCNCALL_RET;
}
#endif//USER_DEF_DUMMY

#ifndef USER_DEF_FATIMA_QDC
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(FATIMA_QDC)::FCNCALL_NAME(FATIMA_QDC)
{
  FCNCALL_INIT;
  FCNCALL_RET;
}
#endif//USER_DEF_FATIMA_QDC

#ifndef USER_DEF_FATIMA_SCALER
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(FATIMA_SCALER)::FCNCALL_NAME(FATIMA_SCALER)
{
  FCNCALL_INIT;
  // raw_list_zero_suppress<DATA32,DATA32,16> scalers;
  {
  FCNCALL_SUBNAME("scalers");
  { FCNCALL_CALL_CTRL_WRAP(scalers,scalers.FCNCALL_CALL(scalers)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_FATIMA_SCALER

#ifndef USER_DEF_FATIMA_TAMEX
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(FATIMA_TAMEX)::FCNCALL_NAME(FATIMA_TAMEX)
{
  FCNCALL_INIT;
  // DUMMY dummy;
  {
  FCNCALL_SUBNAME("dummy");
  { FCNCALL_CALL_CTRL_WRAP(dummy,dummy.FCNCALL_CALL(dummy)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_FATIMA_TAMEX

#ifndef USER_DEF_FATIMA_TDC
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(FATIMA_TDC)::FCNCALL_NAME(FATIMA_TDC)
{
  FCNCALL_INIT;
  FCNCALL_RET;
}
#endif//USER_DEF_FATIMA_TDC

#ifndef USER_DEF_FATIMA_VME
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(FATIMA_VME)::FCNCALL_NAME(FATIMA_VME)
{
  FCNCALL_INIT;
  // FATIMA_SCALER scaler;
  {
  FCNCALL_SUBNAME("scaler");
  { FCNCALL_CALL_CTRL_WRAP(scaler,scaler.FCNCALL_CALL(scaler)); }
  FCNCALL_SUBNAME_END;
  }
  // DUMMY dummy;
  {
  FCNCALL_SUBNAME("dummy");
  { FCNCALL_CALL_CTRL_WRAP(dummy,dummy.FCNCALL_CALL(dummy)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_FATIMA_VME

#ifndef USER_DEF_FRS
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(FRS)::FCNCALL_NAME(FRS)
{
  FCNCALL_INIT;
  // DUMMY dummy;
  {
  FCNCALL_SUBNAME("dummy");
  { FCNCALL_CALL_CTRL_WRAP(dummy,dummy.FCNCALL_CALL(dummy)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_FRS

#ifndef USER_DEF_FRS_FRS
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(FRS_FRS)::FCNCALL_NAME(FRS_FRS)
{
  FCNCALL_INIT;
  // raw_list_zero_suppress<DATA32,DATA32,32> scalers;
  {
  FCNCALL_SUBNAME("scalers");
  { FCNCALL_CALL_CTRL_WRAP(scalers,scalers.FCNCALL_CALL(scalers)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_FRS_FRS

#ifndef USER_DEF_FRS_MAIN
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(FRS_MAIN)::FCNCALL_NAME(FRS_MAIN)
{
  FCNCALL_INIT;
  // raw_list_zero_suppress<DATA32,DATA32,32> scalers;
  {
  FCNCALL_SUBNAME("scalers");
  { FCNCALL_CALL_CTRL_WRAP(scalers,scalers.FCNCALL_CALL(scalers)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_FRS_MAIN

#ifndef USER_DEF_TIMESTAMP_WHITERABBIT
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(TIMESTAMP_WHITERABBIT)::FCNCALL_NAME(TIMESTAMP_WHITERABBIT)
{
  FCNCALL_INIT;
  // DATA12 subsystem_id;
  {
  FCNCALL_SUBNAME("subsystem_id");
  { FCNCALL_CALL_CTRL_WRAP(subsystem_id,subsystem_id.FCNCALL_CALL(subsystem_id)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA16 t1;
  {
  FCNCALL_SUBNAME("t1");
  { FCNCALL_CALL_CTRL_WRAP(t1,t1.FCNCALL_CALL(t1)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA16 t2;
  {
  FCNCALL_SUBNAME("t2");
  { FCNCALL_CALL_CTRL_WRAP(t2,t2.FCNCALL_CALL(t2)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA16 t3;
  {
  FCNCALL_SUBNAME("t3");
  { FCNCALL_CALL_CTRL_WRAP(t3,t3.FCNCALL_CALL(t3)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA16 t4;
  {
  FCNCALL_SUBNAME("t4");
  { FCNCALL_CALL_CTRL_WRAP(t4,t4.FCNCALL_CALL(t4)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_TIMESTAMP_WHITERABBIT

#ifndef USER_DEF_TIMESTAMP_WHITERABBIT_EXTENDED
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(TIMESTAMP_WHITERABBIT_EXTENDED)::FCNCALL_NAME(TIMESTAMP_WHITERABBIT_EXTENDED)
{
  FCNCALL_INIT;
  // DATA16 subsystem_id;
  {
  FCNCALL_SUBNAME("subsystem_id");
  { FCNCALL_CALL_CTRL_WRAP(subsystem_id,subsystem_id.FCNCALL_CALL(subsystem_id)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA16 t1;
  {
  FCNCALL_SUBNAME("t1");
  { FCNCALL_CALL_CTRL_WRAP(t1,t1.FCNCALL_CALL(t1)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA16 t2;
  {
  FCNCALL_SUBNAME("t2");
  { FCNCALL_CALL_CTRL_WRAP(t2,t2.FCNCALL_CALL(t2)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA16 t3;
  {
  FCNCALL_SUBNAME("t3");
  { FCNCALL_CALL_CTRL_WRAP(t3,t3.FCNCALL_CALL(t3)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA16 t4;
  {
  FCNCALL_SUBNAME("t4");
  { FCNCALL_CALL_CTRL_WRAP(t4,t4.FCNCALL_CALL(t4)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_TIMESTAMP_WHITERABBIT_EXTENDED

#ifndef USER_DEF_TRLOII_TPAT
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(TRLOII_TPAT)::FCNCALL_NAME(TRLOII_TPAT)
{
  FCNCALL_INIT;
  // DATA32 n;
  {
  FCNCALL_SUBNAME("n");
  { FCNCALL_CALL_CTRL_WRAP(n,n.FCNCALL_CALL(n)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_list_ii_zero_suppress<DATA32,DATA32,170> tpat;
  {
  FCNCALL_SUBNAME("tpat");
  { FCNCALL_CALL_CTRL_WRAP(tpat,tpat.FCNCALL_CALL(tpat)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_list_ii_zero_suppress<DATA8,DATA8,170> trig;
  {
  FCNCALL_SUBNAME("trig");
  { FCNCALL_CALL_CTRL_WRAP(trig,trig.FCNCALL_CALL(trig)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_list_ii_zero_suppress<DATA32,DATA32,170> ts_lo;
  {
  FCNCALL_SUBNAME("ts_lo");
  { FCNCALL_CALL_CTRL_WRAP(ts_lo,ts_lo.FCNCALL_CALL(ts_lo)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_list_ii_zero_suppress<DATA32,DATA32,170> ts_hi;
  {
  FCNCALL_SUBNAME("ts_hi");
  { FCNCALL_CALL_CTRL_WRAP(ts_hi,ts_hi.FCNCALL_CALL(ts_hi)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_TRLOII_TPAT

#ifndef USER_DEF_WR_MULTI
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(WR_MULTI)::FCNCALL_NAME(WR_MULTI)
{
  FCNCALL_INIT;
  // DATA32 time_hi;
  {
  FCNCALL_SUBNAME("time_hi");
  { FCNCALL_CALL_CTRL_WRAP(time_hi,time_hi.FCNCALL_CALL(time_hi)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA32 time_lo;
  {
  FCNCALL_SUBNAME("time_lo");
  { FCNCALL_CALL_CTRL_WRAP(time_lo,time_lo.FCNCALL_CALL(time_lo)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_WR_MULTI

#ifndef USER_DEF_aida_subev
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(aida_subev)::FCNCALL_NAME(aida_subev)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // TIMESTAMP_WHITERABBIT ts;
  {
  FCNCALL_SUBNAME("ts");
  { FCNCALL_CALL_CTRL_WRAP(ts,ts.FCNCALL_CALL(ts)); }
  FCNCALL_SUBNAME_END;
  }
  // EXT_AIDA data;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(data,data.FCNCALL_CALL(data)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_aida_subev

#ifndef USER_DEF_fatima_tamex_subev
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(fatima_tamex_subev)::FCNCALL_NAME(fatima_tamex_subev)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // TIMESTAMP_WHITERABBIT_EXTENDED ts;
  {
  FCNCALL_SUBNAME("ts");
  { FCNCALL_CALL_CTRL_WRAP(ts,ts.FCNCALL_CALL(ts)); }
  FCNCALL_SUBNAME_END;
  }
  // EXT_FATIMA_TAMEX data;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(data,data.FCNCALL_CALL(data)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_fatima_tamex_subev

#ifndef USER_DEF_fatima_vme_subev
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(fatima_vme_subev)::FCNCALL_NAME(fatima_vme_subev)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // TIMESTAMP_WHITERABBIT_EXTENDED ts;
  {
  FCNCALL_SUBNAME("ts");
  { FCNCALL_CALL_CTRL_WRAP(ts,ts.FCNCALL_CALL(ts)); }
  FCNCALL_SUBNAME_END;
  }
  // EXT_FATIMA_VME data;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(data,data.FCNCALL_CALL(data)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_fatima_vme_subev

#ifndef USER_DEF_frs_frs_subev
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(frs_frs_subev)::FCNCALL_NAME(frs_frs_subev)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // FRS_FRS subev;
  {
  FCNCALL_SUBNAME("subev");
  { FCNCALL_CALL_CTRL_WRAP(subev,subev.FCNCALL_CALL(subev)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_frs_frs_subev

#ifndef USER_DEF_frs_main_subev
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(frs_main_subev)::FCNCALL_NAME(frs_main_subev)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // FRS_MAIN subev;
  {
  FCNCALL_SUBNAME("subev");
  { FCNCALL_CALL_CTRL_WRAP(subev,subev.FCNCALL_CALL(subev)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_frs_main_subev

#ifndef USER_DEF_frs_subev1
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(frs_subev1)::FCNCALL_NAME(frs_subev1)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // TIMESTAMP_WHITERABBIT ts;
  {
  FCNCALL_SUBNAME("ts");
  { FCNCALL_CALL_CTRL_WRAP(ts,ts.FCNCALL_CALL(ts)); }
  FCNCALL_SUBNAME_END;
  }
  // FRS subev;
  {
  FCNCALL_SUBNAME("subev");
  { FCNCALL_CALL_CTRL_WRAP(subev,subev.FCNCALL_CALL(subev)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_frs_subev1

#ifndef USER_DEF_frs_subev4
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(frs_subev4)::FCNCALL_NAME(frs_subev4)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // TIMESTAMP_WHITERABBIT ts;
  {
  FCNCALL_SUBNAME("ts");
  { FCNCALL_CALL_CTRL_WRAP(ts,ts.FCNCALL_CALL(ts)); }
  FCNCALL_SUBNAME_END;
  }
  // FRS subev;
  {
  FCNCALL_SUBNAME("subev");
  { FCNCALL_CALL_CTRL_WRAP(subev,subev.FCNCALL_CALL(subev)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_frs_subev4

#ifndef USER_DEF_frs_subev6
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(frs_subev6)::FCNCALL_NAME(frs_subev6)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // TIMESTAMP_WHITERABBIT ts;
  {
  FCNCALL_SUBNAME("ts");
  { FCNCALL_CALL_CTRL_WRAP(ts,ts.FCNCALL_CALL(ts)); }
  FCNCALL_SUBNAME_END;
  }
  // FRS subev;
  {
  FCNCALL_SUBNAME("subev");
  { FCNCALL_CALL_CTRL_WRAP(subev,subev.FCNCALL_CALL(subev)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_frs_subev6

#ifndef USER_DEF_frs_tpat_subev
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(frs_tpat_subev)::FCNCALL_NAME(frs_tpat_subev)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // DUMMY dummy;
  {
  FCNCALL_SUBNAME("dummy");
  { FCNCALL_CALL_CTRL_WRAP(dummy,dummy.FCNCALL_CALL(dummy)); }
  FCNCALL_SUBNAME_END;
  }
  // TRLOII_TPAT tpat;
  {
  FCNCALL_SUBNAME("tpat");
  { FCNCALL_CALL_CTRL_WRAP(tpat,tpat.FCNCALL_CALL(tpat)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_frs_tpat_subev

#ifndef USER_DEF_germanium_subev
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(germanium_subev)::FCNCALL_NAME(germanium_subev)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // TIMESTAMP_WHITERABBIT ts;
  {
  FCNCALL_SUBNAME("ts");
  { FCNCALL_CALL_CTRL_WRAP(ts,ts.FCNCALL_CALL(ts)); }
  FCNCALL_SUBNAME_END;
  }
  // EXT_GERMANIUM data;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(data,data.FCNCALL_CALL(data)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_germanium_subev

#ifndef USER_DEF_plastic_subev
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(plastic_subev)::FCNCALL_NAME(plastic_subev)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // TIMESTAMP_WHITERABBIT ts;
  {
  FCNCALL_SUBNAME("ts");
  { FCNCALL_CALL_CTRL_WRAP(ts,ts.FCNCALL_CALL(ts)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_plastic_subev

#ifndef USER_DEF_unpack_event
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(unpack_event)::FCNCALL_NAME(unpack_event)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_event_base,FCNCALL_CLASS_NAME(unpack_event_base)::FCNCALL_CALL_BASE());
  // germanium_subev germanium;
  {
  FCNCALL_SUBNAME("germanium");
  { FCNCALL_CALL_CTRL_WRAP(germanium,germanium.FCNCALL_CALL(germanium)); }
  FCNCALL_SUBNAME_END;
  }
  // fatima_vme_subev fatima_vme;
  {
  FCNCALL_SUBNAME("fatima_vme");
  { FCNCALL_CALL_CTRL_WRAP(fatima_vme,fatima_vme.FCNCALL_CALL(fatima_vme)); }
  FCNCALL_SUBNAME_END;
  }
  // fatima_tamex_subev fatima_tamex;
  {
  FCNCALL_SUBNAME("fatima_tamex");
  { FCNCALL_CALL_CTRL_WRAP(fatima_tamex,fatima_tamex.FCNCALL_CALL(fatima_tamex)); }
  FCNCALL_SUBNAME_END;
  }
  // aida_subev aida;
  {
  FCNCALL_SUBNAME("aida");
  { FCNCALL_CALL_CTRL_WRAP(aida,aida.FCNCALL_CALL(aida)); }
  FCNCALL_SUBNAME_END;
  }
  // frs_main_subev frs_main;
  {
  FCNCALL_SUBNAME("frs_main");
  { FCNCALL_CALL_CTRL_WRAP(frs_main,frs_main.FCNCALL_CALL(frs_main)); }
  FCNCALL_SUBNAME_END;
  }
  // frs_tpat_subev frs_tpat;
  {
  FCNCALL_SUBNAME("frs_tpat");
  { FCNCALL_CALL_CTRL_WRAP(frs_tpat,frs_tpat.FCNCALL_CALL(frs_tpat)); }
  FCNCALL_SUBNAME_END;
  }
  // frs_frs_subev frs_frs;
  {
  FCNCALL_SUBNAME("frs_frs");
  { FCNCALL_CALL_CTRL_WRAP(frs_frs,frs_frs.FCNCALL_CALL(frs_frs)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_unpack_event

#ifndef USER_DEF_unpack_sticky_event
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(unpack_sticky_event)::FCNCALL_NAME(unpack_sticky_event)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_sticky_event_base,FCNCALL_CLASS_NAME(unpack_sticky_event_base)::FCNCALL_CALL_BASE());
  FCNCALL_RET;
}
#endif//USER_DEF_unpack_sticky_event

#include "gen/default_fcncall_undef.hh"


/** END_FUNCTION_CALL_PER_MEMBER **************************************/


/** BEGIN_CORR_STRUCT **************************************************
 *
 * Correlation structure.
 *
 * Do not edit - automatically generated.
 */

// Corr struct for: AIDA_INFO
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: AIDA_INFO
// .AIDA_INFO// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: AIDA_INFO
// .AIDA_INFO// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: AIDA_INFO
// .AIDA_INFO
// Corr struct for: AIDA_ADC
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: AIDA_ADC
// .AIDA_ADC// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: AIDA_ADC
// .AIDA_ADC// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: AIDA_ADC
// .AIDA_ADC
// Corr struct for: AIDA_MODULE
// AIDA_INFO  .i
// AIDA_ADC  .d
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: AIDA_MODULE
// .AIDA_MODULE// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: AIDA_MODULE
// .AIDA_MODULE// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: AIDA_MODULE
// .AIDA_MODULE
// Corr struct for: AIDA
// raw_list_ii_zero_suppress  .module(DATA8)[13000]
  // ---
// raw_list_ii_zero_suppress  .channel(DATA8)[13000]
  // ---
// raw_list_ii_zero_suppress  .info(DATA8)[13000]
  // ---
// raw_list_ii_zero_suppress  .adc(DATA16)[13000]
// raw_list_ii_zero_suppress  .ts_low(DATA32)[13000]
  // ---
// raw_list_ii_zero_suppress  .ts_med(DATA32)[13000]
  // ---
// raw_list_ii_zero_suppress  .ts_high(DATA32)[13000]
  // ---
// AIDA_MODULE  .mod[12]
  // AIDA_INFO  .i
  // AIDA_ADC  .d
// DATA16 .adc[13000]
// 
// size= 1  chunks=13000  mem=13000  line=26000  total=338000000
// size=13000  chunks=  1  mem=13000  line=13001  total=169013000
// 
// corr structure: AIDA
  // DATA16 .adc[13000]
// .AIDA/13000/.adc/13000/[13000]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: AIDA
// .AIDA// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: AIDA
// .AIDA
// Corr struct for: DUMMY
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: DUMMY
// .DUMMY// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: DUMMY
// .DUMMY// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: DUMMY
// .DUMMY
// Corr struct for: FATIMA_QDC
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: FATIMA_QDC
// .FATIMA_QDC// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: FATIMA_QDC
// .FATIMA_QDC// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: FATIMA_QDC
// .FATIMA_QDC
// Corr struct for: FATIMA_SCALER
// raw_list_zero_suppress  .scalers(DATA32)[16]
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: FATIMA_SCALER
// .FATIMA_SCALER// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: FATIMA_SCALER
// .FATIMA_SCALER// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: FATIMA_SCALER
// .FATIMA_SCALER
// Corr struct for: FATIMA_TAMEX
// DUMMY  .dummy
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: FATIMA_TAMEX
// .FATIMA_TAMEX// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: FATIMA_TAMEX
// .FATIMA_TAMEX// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: FATIMA_TAMEX
// .FATIMA_TAMEX
// Corr struct for: FATIMA_TDC
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: FATIMA_TDC
// .FATIMA_TDC// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: FATIMA_TDC
// .FATIMA_TDC// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: FATIMA_TDC
// .FATIMA_TDC
// Corr struct for: FATIMA_VME
// FATIMA_SCALER  .scaler
  // raw_list_zero_suppress  .scalers(DATA32)[16]
    // ---
// DUMMY  .dummy
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: FATIMA_VME
// .FATIMA_VME// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: FATIMA_VME
// .FATIMA_VME// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: FATIMA_VME
// .FATIMA_VME
// Corr struct for: FRS
// DUMMY  .dummy
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: FRS
// .FRS// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: FRS
// .FRS// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: FRS
// .FRS
// Corr struct for: FRS_FRS
// raw_list_zero_suppress  .scalers(DATA32)[32]
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: FRS_FRS
// .FRS_FRS// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: FRS_FRS
// .FRS_FRS// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: FRS_FRS
// .FRS_FRS
// Corr struct for: FRS_MAIN
// raw_list_zero_suppress  .scalers(DATA32)[32]
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: FRS_MAIN
// .FRS_MAIN// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: FRS_MAIN
// .FRS_MAIN// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: FRS_MAIN
// .FRS_MAIN
// Corr struct for: TIMESTAMP_WHITERABBIT
// DATA12  .subsystem_id
// DATA16  .t1
// DATA16  .t2
// DATA16  .t3
// DATA16  .t4
// DATA12 .subsystem_id
// DATA16 .t1
// DATA16 .t2
// DATA16 .t3
// DATA16 .t4
// 
// size= 1  chunks=  5  mem=   5  line=10  total=50
// size= 5  chunks=  1  mem=   5  line=6  total=30
// 
// corr structure: TIMESTAMP_WHITERABBIT
  // DATA12 .subsystem_id
  // DATA16 .t1
  // DATA16 .t2
  // DATA16 .t3
  // DATA16 .t4
// .TIMESTAMP_WHITERABBIT/5/.subsystem_id
                         // .t1
                         // .t2
                         // .t3
                         // .t4// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TIMESTAMP_WHITERABBIT
// .TIMESTAMP_WHITERABBIT// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TIMESTAMP_WHITERABBIT
// .TIMESTAMP_WHITERABBIT
// Corr struct for: TIMESTAMP_WHITERABBIT_EXTENDED
// DATA16  .subsystem_id
// DATA16  .t1
// DATA16  .t2
// DATA16  .t3
// DATA16  .t4
// DATA16 .subsystem_id
// DATA16 .t1
// DATA16 .t2
// DATA16 .t3
// DATA16 .t4
// 
// size= 1  chunks=  5  mem=   5  line=10  total=50
// size= 5  chunks=  1  mem=   5  line=6  total=30
// 
// corr structure: TIMESTAMP_WHITERABBIT_EXTENDED
  // DATA16 .subsystem_id
  // DATA16 .t1
  // DATA16 .t2
  // DATA16 .t3
  // DATA16 .t4
// .TIMESTAMP_WHITERABBIT_EXTENDED/5/.subsystem_id
                                  // .t1
                                  // .t2
                                  // .t3
                                  // .t4// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TIMESTAMP_WHITERABBIT_EXTENDED
// .TIMESTAMP_WHITERABBIT_EXTENDED// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TIMESTAMP_WHITERABBIT_EXTENDED
// .TIMESTAMP_WHITERABBIT_EXTENDED
// Corr struct for: TRLOII_TPAT
// DATA32  .n
  // ---
// raw_list_ii_zero_suppress  .tpat(DATA32)[170]
  // ---
// raw_list_ii_zero_suppress  .trig(DATA8)[170]
  // ---
// raw_list_ii_zero_suppress  .ts_lo(DATA32)[170]
  // ---
// raw_list_ii_zero_suppress  .ts_hi(DATA32)[170]
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TRLOII_TPAT
// .TRLOII_TPAT// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TRLOII_TPAT
// .TRLOII_TPAT// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TRLOII_TPAT
// .TRLOII_TPAT
// Corr struct for: WR_MULTI
// DATA32  .time_hi
  // ---
// DATA32  .time_lo
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: WR_MULTI
// .WR_MULTI// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: WR_MULTI
// .WR_MULTI// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: WR_MULTI
// .WR_MULTI
// Corr struct for: aida_subev
//  : public unpack_subevent_base
// ---
// TIMESTAMP_WHITERABBIT  .ts
  // DATA12  .subsystem_id
  // DATA16  .t1
  // DATA16  .t2
  // DATA16  .t3
  // DATA16  .t4
// EXT_AIDA  .data
// DATA12 .ts.subsystem_id
// DATA16 .ts.t1
// DATA16 .ts.t2
// DATA16 .ts.t3
// DATA16 .ts.t4
// 
// size= 1  chunks=  5  mem=   5  line=10  total=50
// size= 5  chunks=  1  mem=   5  line=6  total=30
// 
// corr structure: aida_subev
  // DATA12 .ts.subsystem_id
  // DATA16 .ts.t1
  // DATA16 .ts.t2
  // DATA16 .ts.t3
  // DATA16 .ts.t4
// .aida_subev/5/.ts/5/.subsystem_id
                    // .t1
                    // .t2
                    // .t3
                    // .t4// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: aida_subev
// .aida_subev// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: aida_subev
// .aida_subev
// Corr struct for: fatima_tamex_subev
//  : public unpack_subevent_base
// ---
// TIMESTAMP_WHITERABBIT_EXTENDED  .ts
  // DATA16  .subsystem_id
  // DATA16  .t1
  // DATA16  .t2
  // DATA16  .t3
  // DATA16  .t4
// EXT_FATIMA_TAMEX  .data
// DATA16 .ts.subsystem_id
// DATA16 .ts.t1
// DATA16 .ts.t2
// DATA16 .ts.t3
// DATA16 .ts.t4
// 
// size= 1  chunks=  5  mem=   5  line=10  total=50
// size= 5  chunks=  1  mem=   5  line=6  total=30
// 
// corr structure: fatima_tamex_subev
  // DATA16 .ts.subsystem_id
  // DATA16 .ts.t1
  // DATA16 .ts.t2
  // DATA16 .ts.t3
  // DATA16 .ts.t4
// .fatima_tamex_subev/5/.ts/5/.subsystem_id
                            // .t1
                            // .t2
                            // .t3
                            // .t4// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: fatima_tamex_subev
// .fatima_tamex_subev// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: fatima_tamex_subev
// .fatima_tamex_subev
// Corr struct for: fatima_vme_subev
//  : public unpack_subevent_base
// ---
// TIMESTAMP_WHITERABBIT_EXTENDED  .ts
  // DATA16  .subsystem_id
  // DATA16  .t1
  // DATA16  .t2
  // DATA16  .t3
  // DATA16  .t4
// EXT_FATIMA_VME  .data
// DATA16 .ts.subsystem_id
// DATA16 .ts.t1
// DATA16 .ts.t2
// DATA16 .ts.t3
// DATA16 .ts.t4
// 
// size= 1  chunks=  5  mem=   5  line=10  total=50
// size= 5  chunks=  1  mem=   5  line=6  total=30
// 
// corr structure: fatima_vme_subev
  // DATA16 .ts.subsystem_id
  // DATA16 .ts.t1
  // DATA16 .ts.t2
  // DATA16 .ts.t3
  // DATA16 .ts.t4
// .fatima_vme_subev/5/.ts/5/.subsystem_id
                          // .t1
                          // .t2
                          // .t3
                          // .t4// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: fatima_vme_subev
// .fatima_vme_subev// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: fatima_vme_subev
// .fatima_vme_subev
// Corr struct for: frs_frs_subev
//  : public unpack_subevent_base
// ---
// FRS_FRS  .subev
  // raw_list_zero_suppress  .scalers(DATA32)[32]
    // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: frs_frs_subev
// .frs_frs_subev// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: frs_frs_subev
// .frs_frs_subev// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: frs_frs_subev
// .frs_frs_subev
// Corr struct for: frs_main_subev
//  : public unpack_subevent_base
// ---
// FRS_MAIN  .subev
  // raw_list_zero_suppress  .scalers(DATA32)[32]
    // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: frs_main_subev
// .frs_main_subev// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: frs_main_subev
// .frs_main_subev// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: frs_main_subev
// .frs_main_subev
// Corr struct for: frs_subev1
//  : public unpack_subevent_base
// ---
// TIMESTAMP_WHITERABBIT  .ts
  // DATA12  .subsystem_id
  // DATA16  .t1
  // DATA16  .t2
  // DATA16  .t3
  // DATA16  .t4
// FRS  .subev
  // DUMMY  .dummy
// DATA12 .ts.subsystem_id
// DATA16 .ts.t1
// DATA16 .ts.t2
// DATA16 .ts.t3
// DATA16 .ts.t4
// 
// size= 1  chunks=  5  mem=   5  line=10  total=50
// size= 5  chunks=  1  mem=   5  line=6  total=30
// 
// corr structure: frs_subev1
  // DATA12 .ts.subsystem_id
  // DATA16 .ts.t1
  // DATA16 .ts.t2
  // DATA16 .ts.t3
  // DATA16 .ts.t4
// .frs_subev1/5/.ts/5/.subsystem_id
                    // .t1
                    // .t2
                    // .t3
                    // .t4// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: frs_subev1
// .frs_subev1// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: frs_subev1
// .frs_subev1
// Corr struct for: frs_subev4
//  : public unpack_subevent_base
// ---
// TIMESTAMP_WHITERABBIT  .ts
  // DATA12  .subsystem_id
  // DATA16  .t1
  // DATA16  .t2
  // DATA16  .t3
  // DATA16  .t4
// FRS  .subev
  // DUMMY  .dummy
// DATA12 .ts.subsystem_id
// DATA16 .ts.t1
// DATA16 .ts.t2
// DATA16 .ts.t3
// DATA16 .ts.t4
// 
// size= 1  chunks=  5  mem=   5  line=10  total=50
// size= 5  chunks=  1  mem=   5  line=6  total=30
// 
// corr structure: frs_subev4
  // DATA12 .ts.subsystem_id
  // DATA16 .ts.t1
  // DATA16 .ts.t2
  // DATA16 .ts.t3
  // DATA16 .ts.t4
// .frs_subev4/5/.ts/5/.subsystem_id
                    // .t1
                    // .t2
                    // .t3
                    // .t4// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: frs_subev4
// .frs_subev4// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: frs_subev4
// .frs_subev4
// Corr struct for: frs_subev6
//  : public unpack_subevent_base
// ---
// TIMESTAMP_WHITERABBIT  .ts
  // DATA12  .subsystem_id
  // DATA16  .t1
  // DATA16  .t2
  // DATA16  .t3
  // DATA16  .t4
// FRS  .subev
  // DUMMY  .dummy
// DATA12 .ts.subsystem_id
// DATA16 .ts.t1
// DATA16 .ts.t2
// DATA16 .ts.t3
// DATA16 .ts.t4
// 
// size= 1  chunks=  5  mem=   5  line=10  total=50
// size= 5  chunks=  1  mem=   5  line=6  total=30
// 
// corr structure: frs_subev6
  // DATA12 .ts.subsystem_id
  // DATA16 .ts.t1
  // DATA16 .ts.t2
  // DATA16 .ts.t3
  // DATA16 .ts.t4
// .frs_subev6/5/.ts/5/.subsystem_id
                    // .t1
                    // .t2
                    // .t3
                    // .t4// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: frs_subev6
// .frs_subev6// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: frs_subev6
// .frs_subev6
// Corr struct for: frs_tpat_subev
//  : public unpack_subevent_base
// ---
// DUMMY  .dummy
// TRLOII_TPAT  .tpat
  // DATA32  .n
    // ---
  // raw_list_ii_zero_suppress  .tpat(DATA32)[170]
    // ---
  // raw_list_ii_zero_suppress  .trig(DATA8)[170]
    // ---
  // raw_list_ii_zero_suppress  .ts_lo(DATA32)[170]
    // ---
  // raw_list_ii_zero_suppress  .ts_hi(DATA32)[170]
    // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: frs_tpat_subev
// .frs_tpat_subev// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: frs_tpat_subev
// .frs_tpat_subev// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: frs_tpat_subev
// .frs_tpat_subev
// Corr struct for: germanium_subev
//  : public unpack_subevent_base
// ---
// TIMESTAMP_WHITERABBIT  .ts
  // DATA12  .subsystem_id
  // DATA16  .t1
  // DATA16  .t2
  // DATA16  .t3
  // DATA16  .t4
// EXT_GERMANIUM  .data
// DATA12 .ts.subsystem_id
// DATA16 .ts.t1
// DATA16 .ts.t2
// DATA16 .ts.t3
// DATA16 .ts.t4
// 
// size= 1  chunks=  5  mem=   5  line=10  total=50
// size= 5  chunks=  1  mem=   5  line=6  total=30
// 
// corr structure: germanium_subev
  // DATA12 .ts.subsystem_id
  // DATA16 .ts.t1
  // DATA16 .ts.t2
  // DATA16 .ts.t3
  // DATA16 .ts.t4
// .germanium_subev/5/.ts/5/.subsystem_id
                         // .t1
                         // .t2
                         // .t3
                         // .t4// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: germanium_subev
// .germanium_subev// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: germanium_subev
// .germanium_subev
// Corr struct for: plastic_subev
//  : public unpack_subevent_base
// ---
// TIMESTAMP_WHITERABBIT  .ts
  // DATA12  .subsystem_id
  // DATA16  .t1
  // DATA16  .t2
  // DATA16  .t3
  // DATA16  .t4
// DATA12 .ts.subsystem_id
// DATA16 .ts.t1
// DATA16 .ts.t2
// DATA16 .ts.t3
// DATA16 .ts.t4
// 
// size= 1  chunks=  5  mem=   5  line=10  total=50
// size= 5  chunks=  1  mem=   5  line=6  total=30
// 
// corr structure: plastic_subev
  // DATA12 .ts.subsystem_id
  // DATA16 .ts.t1
  // DATA16 .ts.t2
  // DATA16 .ts.t3
  // DATA16 .ts.t4
// .plastic_subev/5/.ts/5/.subsystem_id
                       // .t1
                       // .t2
                       // .t3
                       // .t4// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: plastic_subev
// .plastic_subev// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: plastic_subev
// .plastic_subev
// Corr struct for: unpack_event
//  : public unpack_event_base
// ---
// germanium_subev  .germanium
  //  : public unpack_subevent_base
  // ---
  // TIMESTAMP_WHITERABBIT  .ts
    // DATA12  .subsystem_id
    // DATA16  .t1
    // DATA16  .t2
    // DATA16  .t3
    // DATA16  .t4
  // EXT_GERMANIUM  .data
// fatima_vme_subev  .fatima_vme
  //  : public unpack_subevent_base
  // ---
  // TIMESTAMP_WHITERABBIT_EXTENDED  .ts
    // DATA16  .subsystem_id
    // DATA16  .t1
    // DATA16  .t2
    // DATA16  .t3
    // DATA16  .t4
  // EXT_FATIMA_VME  .data
// fatima_tamex_subev  .fatima_tamex
  //  : public unpack_subevent_base
  // ---
  // TIMESTAMP_WHITERABBIT_EXTENDED  .ts
    // DATA16  .subsystem_id
    // DATA16  .t1
    // DATA16  .t2
    // DATA16  .t3
    // DATA16  .t4
  // EXT_FATIMA_TAMEX  .data
// aida_subev  .aida
  //  : public unpack_subevent_base
  // ---
  // TIMESTAMP_WHITERABBIT  .ts
    // DATA12  .subsystem_id
    // DATA16  .t1
    // DATA16  .t2
    // DATA16  .t3
    // DATA16  .t4
  // EXT_AIDA  .data
// frs_main_subev  .frs_main
  //  : public unpack_subevent_base
  // ---
  // FRS_MAIN  .subev
    // raw_list_zero_suppress  .scalers(DATA32)[32]
      // ---
// frs_tpat_subev  .frs_tpat
  //  : public unpack_subevent_base
  // ---
  // DUMMY  .dummy
  // TRLOII_TPAT  .tpat
    // DATA32  .n
      // ---
    // raw_list_ii_zero_suppress  .tpat(DATA32)[170]
      // ---
    // raw_list_ii_zero_suppress  .trig(DATA8)[170]
      // ---
    // raw_list_ii_zero_suppress  .ts_lo(DATA32)[170]
      // ---
    // raw_list_ii_zero_suppress  .ts_hi(DATA32)[170]
      // ---
// frs_frs_subev  .frs_frs
  //  : public unpack_subevent_base
  // ---
  // FRS_FRS  .subev
    // raw_list_zero_suppress  .scalers(DATA32)[32]
      // ---
// DATA12 .germanium.ts.subsystem_id
// DATA16 .germanium.ts.t1
// DATA16 .germanium.ts.t2
// DATA16 .germanium.ts.t3
// DATA16 .germanium.ts.t4
// DATA16 .fatima_vme.ts.subsystem_id
// DATA16 .fatima_vme.ts.t1
// DATA16 .fatima_vme.ts.t2
// DATA16 .fatima_vme.ts.t3
// DATA16 .fatima_vme.ts.t4
// DATA16 .fatima_tamex.ts.subsystem_id
// DATA16 .fatima_tamex.ts.t1
// DATA16 .fatima_tamex.ts.t2
// DATA16 .fatima_tamex.ts.t3
// DATA16 .fatima_tamex.ts.t4
// DATA12 .aida.ts.subsystem_id
// DATA16 .aida.ts.t1
// DATA16 .aida.ts.t2
// DATA16 .aida.ts.t3
// DATA16 .aida.ts.t4
// 
// size= 1  chunks= 20  mem=  20  line=40  total=800
// size= 5  chunks=  4  mem=  20  line=24  total=480
// size=20  chunks=  1  mem=  20  line=21  total=420
// 
// corr structure: unpack_event
  // DATA12 .germanium.ts.subsystem_id
  // DATA16 .germanium.ts.t1
  // DATA16 .germanium.ts.t2
  // DATA16 .germanium.ts.t3
  // DATA16 .germanium.ts.t4
  // DATA16 .fatima_vme.ts.subsystem_id
  // DATA16 .fatima_vme.ts.t1
  // DATA16 .fatima_vme.ts.t2
  // DATA16 .fatima_vme.ts.t3
  // DATA16 .fatima_vme.ts.t4
  // DATA16 .fatima_tamex.ts.subsystem_id
  // DATA16 .fatima_tamex.ts.t1
  // DATA16 .fatima_tamex.ts.t2
  // DATA16 .fatima_tamex.ts.t3
  // DATA16 .fatima_tamex.ts.t4
  // DATA12 .aida.ts.subsystem_id
  // DATA16 .aida.ts.t1
  // DATA16 .aida.ts.t2
  // DATA16 .aida.ts.t3
  // DATA16 .aida.ts.t4
// .unpack_event/20/.germanium/5/.ts/5/.subsystem_id
                                    // .t1
                                    // .t2
                                    // .t3
                                    // .t4
                 // .fatima_vme/5/.ts/5/.subsystem_id
                                     // .t1
                                     // .t2
                                     // .t3
                                     // .t4
                 // .fatima_tamex/5/.ts/5/.subsystem_id
                                       // .t1
                                       // .t2
                                       // .t3
                                       // .t4
                 // .aida/5/.ts/5/.subsystem_id
                               // .t1
                               // .t2
                               // .t3
                               // .t4// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: unpack_event
// .unpack_event// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: unpack_event
// .unpack_event
// Corr struct for: unpack_sticky_event
//  : public unpack_sticky_event_base
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: unpack_sticky_event
// .unpack_sticky_event// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: unpack_sticky_event
// .unpack_sticky_event// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: unpack_sticky_event
// .unpack_sticky_event

/** END_CORR_STRUCT ***************************************************/

