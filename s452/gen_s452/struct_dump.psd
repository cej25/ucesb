
/** BEGIN_INPUT_DEFINITION *********************************************
 *
 * All specifications as seen by the parser.
 *
 * Do not edit - automatically generated.
 */

/**********************************************************
 * Dump of all structures:
 */

class ADC_DATA
{
  ;
} ;
class BARRIER
{
  ;
} ;
class DUMMY
{
  ;
} ;
class SKIP
{
  ;
} ;
class TAMEX4_EPOCH_DATA
{
  ;
} ;
class TAMEX4_HEADER
{
  raw_list_ii_zero_suppress<DATA16,DATA16,64> post_trig_ns;
  raw_list_ii_zero_suppress<DATA16,DATA16,64> pre_trig_ns;
} ;
class TAMEX4_PADDING
{
  ;
} ;
class TAMEX4_TIME_DATA
{
  ;
} ;
class TAMEX4_SFP
{
  raw_list_ii_zero_suppress<DATA12,DATA12,512> time_coarse;
  raw_list_ii_zero_suppress<DATA12,DATA12,512> time_fine;
  raw_list_ii_zero_suppress<DATA12,DATA12,512> time_edge;
  raw_list_ii_zero_suppress<DATA12,DATA12,512> time_channel;
  raw_list_ii_zero_suppress<DATA32,DATA32,512> time_epoch;
  TAMEX4_TIME_DATA time;
  TAMEX4_EPOCH_DATA epoch;
} ;
class TAMEX_SFP
{
  TAMEX4_SFP card[5];
} ;
class TDC_DATA
{
  DATA8 multihit;
} ;
class TDC_ERROR
{
  ;
} ;
class TDC_HEADER
{
  ;
} ;
class TDC_TRAILER
{
  ;
} ;
class TIMESTAMP_WHITERABBIT
{
  DATA12 subsystem_id;
  DATA16 t1;
  DATA16 t2;
  DATA16 t3;
  DATA16 t4;
} ;
class TIMESTAMP_WHITERABBIT_EXTENDED
{
  DATA16 subsystem_id;
  DATA16 t1;
  DATA16 t2;
  DATA16 t3;
  DATA16 t4;
} ;
class VME_CAEN_V1290_FRS
{
  raw_array_multi_zero_suppress<DATA24,DATA24,32,32> data;
  raw_list_ii_zero_suppress<DATA8,DATA8,32> channel;
  raw_list_ii_zero_suppress<DATA8,DATA8,32> leadOrTrail;
  TDC_HEADER tdc_header;
  TDC_DATA measurement;
  TDC_ERROR tdc_error;
  TDC_TRAILER tdc_trailer;
} ;
class VME_CAEN_V792_FRS
{
  ;
} ;
class VME_CAEN_V830_FRS
{
  ;
} ;
class WR_MULTI
{
  DATA32 time_hi;
  DATA32 time_lo;
} ;
class aida_subev : public unpack_subevent_base
{
  TIMESTAMP_WHITERABBIT ts;
  EXT_AIDA data;
  DUMMY dummy;
} ;
class fatima_tamex_subev : public unpack_subevent_base
{
  TIMESTAMP_WHITERABBIT_EXTENDED ts;
  EXT_FATIMA_TAMEX data;
  DUMMY dummy;
} ;
class fatima_vme_subev : public unpack_subevent_base
{
  TIMESTAMP_WHITERABBIT_EXTENDED ts;
  EXT_FATIMA_VME data;
  DUMMY dummy;
} ;
class frs_crate_subev : public unpack_subevent_base
{
  EXT_FRS data;
  DUMMY dummy;
} ;
class frs_main_crate_subev : public unpack_subevent_base
{
  EXT_FRS data;
  DUMMY dummy;
} ;
class frs_tof_crate_subev : public unpack_subevent_base
{
  EXT_FRS data;
  DUMMY dummy;
} ;
class frs_tpat_subev : public unpack_subevent_base
{
  EXT_FRS data;
  DUMMY dummy;
} ;
class frs_tpc_crate_subev : public unpack_subevent_base
{
  EXT_FRS data;
  DUMMY dummy;
} ;
class frs_whiterabbit_subev : public unpack_subevent_base
{
  TIMESTAMP_WHITERABBIT ts;
  DUMMY dummy;
} ;
class germanium_subev : public unpack_subevent_base
{
  TIMESTAMP_WHITERABBIT ts;
  EXT_GERMANIUM data;
  DUMMY dummy;
} ;
class plastic_subev : public unpack_subevent_base
{
  EXT_PLASTIC_TP data_tp;
  TAMEX4_PADDING padding;
  TAMEX_SFP crate[1];
  TAMEX4_HEADER header;
  TIMESTAMP_WHITERABBIT ts;
  DUMMY dummy;
} ;
class unpack_event : public unpack_event_base
{
  plastic_subev plastic;
} ;
class unpack_sticky_event : public unpack_sticky_event_base
{
  ;
} ;
/**********************************************************/

/** END_INPUT_DEFINITION **********************************************/


/** BEGIN_MIRROR_STRUCT ************************************************
 *
 * Mirror (1 to 1) structure.
 *
 * Do not edit - automatically generated.
 */

#include "gen/default_mirror_define.hh"

#ifndef USER_DEF_ADC_DATA
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(ADC_DATA)
{
public:
  STRUCT_MIRROR_FCNS_DECL(ADC_DATA);
};
#endif//USER_DEF_ADC_DATA

#ifndef USER_DEF_BARRIER
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(BARRIER)
{
public:
  STRUCT_MIRROR_FCNS_DECL(BARRIER);
};
#endif//USER_DEF_BARRIER

#ifndef USER_DEF_DUMMY
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(DUMMY)
{
public:
  STRUCT_MIRROR_FCNS_DECL(DUMMY);
};
#endif//USER_DEF_DUMMY

#ifndef USER_DEF_SKIP
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(SKIP)
{
public:
  STRUCT_MIRROR_FCNS_DECL(SKIP);
};
#endif//USER_DEF_SKIP

#ifndef USER_DEF_TAMEX4_EPOCH_DATA
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(TAMEX4_EPOCH_DATA)
{
public:
  STRUCT_MIRROR_FCNS_DECL(TAMEX4_EPOCH_DATA);
};
#endif//USER_DEF_TAMEX4_EPOCH_DATA

#ifndef USER_DEF_TAMEX4_HEADER
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(TAMEX4_HEADER)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(post_trig_ns);
  STRUCT_MIRROR_TYPE(raw_list_ii_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA16),STRUCT_MIRROR_TEMPLATE_ARG(DATA16),64> STRUCT_MIRROR_NAME(post_trig_ns);
  STRUCT_MIRROR_ITEM_CTRL(pre_trig_ns);
  STRUCT_MIRROR_TYPE(raw_list_ii_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA16),STRUCT_MIRROR_TEMPLATE_ARG(DATA16),64> STRUCT_MIRROR_NAME(pre_trig_ns);
  STRUCT_MIRROR_FCNS_DECL(TAMEX4_HEADER);
};
#endif//USER_DEF_TAMEX4_HEADER

#ifndef USER_DEF_TAMEX4_PADDING
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(TAMEX4_PADDING)
{
public:
  STRUCT_MIRROR_FCNS_DECL(TAMEX4_PADDING);
};
#endif//USER_DEF_TAMEX4_PADDING

#ifndef USER_DEF_TAMEX4_TIME_DATA
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(TAMEX4_TIME_DATA)
{
public:
  STRUCT_MIRROR_FCNS_DECL(TAMEX4_TIME_DATA);
};
#endif//USER_DEF_TAMEX4_TIME_DATA

#ifndef USER_DEF_TAMEX4_SFP
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(TAMEX4_SFP)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(time_coarse);
  STRUCT_MIRROR_TYPE(raw_list_ii_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA12),STRUCT_MIRROR_TEMPLATE_ARG(DATA12),512> STRUCT_MIRROR_NAME(time_coarse);
  STRUCT_MIRROR_ITEM_CTRL(time_fine);
  STRUCT_MIRROR_TYPE(raw_list_ii_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA12),STRUCT_MIRROR_TEMPLATE_ARG(DATA12),512> STRUCT_MIRROR_NAME(time_fine);
  STRUCT_MIRROR_ITEM_CTRL(time_edge);
  STRUCT_MIRROR_TYPE(raw_list_ii_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA12),STRUCT_MIRROR_TEMPLATE_ARG(DATA12),512> STRUCT_MIRROR_NAME(time_edge);
  STRUCT_MIRROR_ITEM_CTRL(time_channel);
  STRUCT_MIRROR_TYPE(raw_list_ii_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA12),STRUCT_MIRROR_TEMPLATE_ARG(DATA12),512> STRUCT_MIRROR_NAME(time_channel);
  STRUCT_MIRROR_ITEM_CTRL(time_epoch);
  STRUCT_MIRROR_TYPE(raw_list_ii_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA32),STRUCT_MIRROR_TEMPLATE_ARG(DATA32),512> STRUCT_MIRROR_NAME(time_epoch);
  STRUCT_MIRROR_ITEM_CTRL(time);
  STRUCT_MIRROR_TYPE(TAMEX4_TIME_DATA) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(time);
  STRUCT_MIRROR_ITEM_CTRL(epoch);
  STRUCT_MIRROR_TYPE(TAMEX4_EPOCH_DATA) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(epoch);
  STRUCT_MIRROR_FCNS_DECL(TAMEX4_SFP);
};
#endif//USER_DEF_TAMEX4_SFP

#ifndef USER_DEF_TAMEX_SFP
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(TAMEX_SFP)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(card);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(card__i0,,5);
  STRUCT_MIRROR_TYPE(TAMEX4_SFP) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(card[5]);
  STRUCT_MIRROR_FCNS_DECL(TAMEX_SFP);
};
#endif//USER_DEF_TAMEX_SFP

#ifndef USER_DEF_TDC_DATA
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(TDC_DATA)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(multihit);
  STRUCT_MIRROR_TYPE(DATA8) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(multihit);
  STRUCT_MIRROR_FCNS_DECL(TDC_DATA);
};
#endif//USER_DEF_TDC_DATA

#ifndef USER_DEF_TDC_ERROR
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(TDC_ERROR)
{
public:
  STRUCT_MIRROR_FCNS_DECL(TDC_ERROR);
};
#endif//USER_DEF_TDC_ERROR

#ifndef USER_DEF_TDC_HEADER
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(TDC_HEADER)
{
public:
  STRUCT_MIRROR_FCNS_DECL(TDC_HEADER);
};
#endif//USER_DEF_TDC_HEADER

#ifndef USER_DEF_TDC_TRAILER
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(TDC_TRAILER)
{
public:
  STRUCT_MIRROR_FCNS_DECL(TDC_TRAILER);
};
#endif//USER_DEF_TDC_TRAILER

#ifndef USER_DEF_TIMESTAMP_WHITERABBIT
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(TIMESTAMP_WHITERABBIT)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(subsystem_id);
  STRUCT_MIRROR_TYPE(DATA12) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(subsystem_id);
  STRUCT_MIRROR_ITEM_CTRL(t1);
  STRUCT_MIRROR_TYPE(DATA16) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(t1);
  STRUCT_MIRROR_ITEM_CTRL(t2);
  STRUCT_MIRROR_TYPE(DATA16) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(t2);
  STRUCT_MIRROR_ITEM_CTRL(t3);
  STRUCT_MIRROR_TYPE(DATA16) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(t3);
  STRUCT_MIRROR_ITEM_CTRL(t4);
  STRUCT_MIRROR_TYPE(DATA16) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(t4);
  STRUCT_MIRROR_FCNS_DECL(TIMESTAMP_WHITERABBIT);
};
#endif//USER_DEF_TIMESTAMP_WHITERABBIT

#ifndef USER_DEF_TIMESTAMP_WHITERABBIT_EXTENDED
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(TIMESTAMP_WHITERABBIT_EXTENDED)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(subsystem_id);
  STRUCT_MIRROR_TYPE(DATA16) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(subsystem_id);
  STRUCT_MIRROR_ITEM_CTRL(t1);
  STRUCT_MIRROR_TYPE(DATA16) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(t1);
  STRUCT_MIRROR_ITEM_CTRL(t2);
  STRUCT_MIRROR_TYPE(DATA16) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(t2);
  STRUCT_MIRROR_ITEM_CTRL(t3);
  STRUCT_MIRROR_TYPE(DATA16) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(t3);
  STRUCT_MIRROR_ITEM_CTRL(t4);
  STRUCT_MIRROR_TYPE(DATA16) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(t4);
  STRUCT_MIRROR_FCNS_DECL(TIMESTAMP_WHITERABBIT_EXTENDED);
};
#endif//USER_DEF_TIMESTAMP_WHITERABBIT_EXTENDED

#ifndef USER_DEF_VME_CAEN_V1290_FRS
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(VME_CAEN_V1290_FRS)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_TYPE(raw_array_multi_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA24),STRUCT_MIRROR_TEMPLATE_ARG(DATA24),32,32> STRUCT_MIRROR_NAME(data);
  STRUCT_MIRROR_ITEM_CTRL(channel);
  STRUCT_MIRROR_TYPE(raw_list_ii_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA8),STRUCT_MIRROR_TEMPLATE_ARG(DATA8),32> STRUCT_MIRROR_NAME(channel);
  STRUCT_MIRROR_ITEM_CTRL(leadOrTrail);
  STRUCT_MIRROR_TYPE(raw_list_ii_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA8),STRUCT_MIRROR_TEMPLATE_ARG(DATA8),32> STRUCT_MIRROR_NAME(leadOrTrail);
  STRUCT_MIRROR_ITEM_CTRL(tdc_header);
  STRUCT_MIRROR_TYPE(TDC_HEADER) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tdc_header);
  STRUCT_MIRROR_ITEM_CTRL(measurement);
  STRUCT_MIRROR_TYPE(TDC_DATA) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(measurement);
  STRUCT_MIRROR_ITEM_CTRL(tdc_error);
  STRUCT_MIRROR_TYPE(TDC_ERROR) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tdc_error);
  STRUCT_MIRROR_ITEM_CTRL(tdc_trailer);
  STRUCT_MIRROR_TYPE(TDC_TRAILER) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tdc_trailer);
  STRUCT_MIRROR_FCNS_DECL(VME_CAEN_V1290_FRS);
};
#endif//USER_DEF_VME_CAEN_V1290_FRS

#ifndef USER_DEF_VME_CAEN_V792_FRS
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(VME_CAEN_V792_FRS)
{
public:
  STRUCT_MIRROR_FCNS_DECL(VME_CAEN_V792_FRS);
};
#endif//USER_DEF_VME_CAEN_V792_FRS

#ifndef USER_DEF_VME_CAEN_V830_FRS
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(VME_CAEN_V830_FRS)
{
public:
  STRUCT_MIRROR_FCNS_DECL(VME_CAEN_V830_FRS);
};
#endif//USER_DEF_VME_CAEN_V830_FRS

#ifndef USER_DEF_WR_MULTI
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(WR_MULTI)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(time_hi);
  STRUCT_MIRROR_TYPE(DATA32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(time_hi);
  STRUCT_MIRROR_ITEM_CTRL(time_lo);
  STRUCT_MIRROR_TYPE(DATA32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(time_lo);
  STRUCT_MIRROR_FCNS_DECL(WR_MULTI);
};
#endif//USER_DEF_WR_MULTI

#ifndef USER_DEF_aida_subev
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(aida_subev) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(ts);
  STRUCT_MIRROR_TYPE(TIMESTAMP_WHITERABBIT) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(ts);
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_TYPE(EXT_AIDA) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(data);
  STRUCT_MIRROR_ITEM_CTRL(dummy);
  STRUCT_MIRROR_TYPE(DUMMY) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy);
  STRUCT_MIRROR_FCNS_DECL(aida_subev);
};
#endif//USER_DEF_aida_subev

#ifndef USER_DEF_fatima_tamex_subev
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(fatima_tamex_subev) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(ts);
  STRUCT_MIRROR_TYPE(TIMESTAMP_WHITERABBIT_EXTENDED) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(ts);
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_TYPE(EXT_FATIMA_TAMEX) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(data);
  STRUCT_MIRROR_ITEM_CTRL(dummy);
  STRUCT_MIRROR_TYPE(DUMMY) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy);
  STRUCT_MIRROR_FCNS_DECL(fatima_tamex_subev);
};
#endif//USER_DEF_fatima_tamex_subev

#ifndef USER_DEF_fatima_vme_subev
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(fatima_vme_subev) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(ts);
  STRUCT_MIRROR_TYPE(TIMESTAMP_WHITERABBIT_EXTENDED) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(ts);
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_TYPE(EXT_FATIMA_VME) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(data);
  STRUCT_MIRROR_ITEM_CTRL(dummy);
  STRUCT_MIRROR_TYPE(DUMMY) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy);
  STRUCT_MIRROR_FCNS_DECL(fatima_vme_subev);
};
#endif//USER_DEF_fatima_vme_subev

#ifndef USER_DEF_frs_crate_subev
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(frs_crate_subev) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_TYPE(EXT_FRS) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(data);
  STRUCT_MIRROR_ITEM_CTRL(dummy);
  STRUCT_MIRROR_TYPE(DUMMY) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy);
  STRUCT_MIRROR_FCNS_DECL(frs_crate_subev);
};
#endif//USER_DEF_frs_crate_subev

#ifndef USER_DEF_frs_main_crate_subev
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(frs_main_crate_subev) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_TYPE(EXT_FRS) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(data);
  STRUCT_MIRROR_ITEM_CTRL(dummy);
  STRUCT_MIRROR_TYPE(DUMMY) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy);
  STRUCT_MIRROR_FCNS_DECL(frs_main_crate_subev);
};
#endif//USER_DEF_frs_main_crate_subev

#ifndef USER_DEF_frs_tof_crate_subev
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(frs_tof_crate_subev) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_TYPE(EXT_FRS) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(data);
  STRUCT_MIRROR_ITEM_CTRL(dummy);
  STRUCT_MIRROR_TYPE(DUMMY) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy);
  STRUCT_MIRROR_FCNS_DECL(frs_tof_crate_subev);
};
#endif//USER_DEF_frs_tof_crate_subev

#ifndef USER_DEF_frs_tpat_subev
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(frs_tpat_subev) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_TYPE(EXT_FRS) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(data);
  STRUCT_MIRROR_ITEM_CTRL(dummy);
  STRUCT_MIRROR_TYPE(DUMMY) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy);
  STRUCT_MIRROR_FCNS_DECL(frs_tpat_subev);
};
#endif//USER_DEF_frs_tpat_subev

#ifndef USER_DEF_frs_tpc_crate_subev
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(frs_tpc_crate_subev) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_TYPE(EXT_FRS) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(data);
  STRUCT_MIRROR_ITEM_CTRL(dummy);
  STRUCT_MIRROR_TYPE(DUMMY) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy);
  STRUCT_MIRROR_FCNS_DECL(frs_tpc_crate_subev);
};
#endif//USER_DEF_frs_tpc_crate_subev

#ifndef USER_DEF_frs_whiterabbit_subev
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(frs_whiterabbit_subev) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(ts);
  STRUCT_MIRROR_TYPE(TIMESTAMP_WHITERABBIT) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(ts);
  STRUCT_MIRROR_ITEM_CTRL(dummy);
  STRUCT_MIRROR_TYPE(DUMMY) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy);
  STRUCT_MIRROR_FCNS_DECL(frs_whiterabbit_subev);
};
#endif//USER_DEF_frs_whiterabbit_subev

#ifndef USER_DEF_germanium_subev
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(germanium_subev) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(ts);
  STRUCT_MIRROR_TYPE(TIMESTAMP_WHITERABBIT) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(ts);
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_TYPE(EXT_GERMANIUM) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(data);
  STRUCT_MIRROR_ITEM_CTRL(dummy);
  STRUCT_MIRROR_TYPE(DUMMY) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy);
  STRUCT_MIRROR_FCNS_DECL(germanium_subev);
};
#endif//USER_DEF_germanium_subev

#ifndef USER_DEF_plastic_subev
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(plastic_subev) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(data_tp);
  STRUCT_MIRROR_TYPE(EXT_PLASTIC_TP) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(data_tp);
  STRUCT_MIRROR_ITEM_CTRL(padding);
  STRUCT_MIRROR_TYPE(TAMEX4_PADDING) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(padding);
  STRUCT_MIRROR_ITEM_CTRL(crate);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(crate__i0,,1);
  STRUCT_MIRROR_TYPE(TAMEX_SFP) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(crate[1]);
  STRUCT_MIRROR_ITEM_CTRL(header);
  STRUCT_MIRROR_TYPE(TAMEX4_HEADER) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(header);
  STRUCT_MIRROR_ITEM_CTRL(ts);
  STRUCT_MIRROR_TYPE(TIMESTAMP_WHITERABBIT) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(ts);
  STRUCT_MIRROR_ITEM_CTRL(dummy);
  STRUCT_MIRROR_TYPE(DUMMY) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy);
  STRUCT_MIRROR_FCNS_DECL(plastic_subev);
};
#endif//USER_DEF_plastic_subev

#ifndef USER_DEF_unpack_event
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(unpack_event) : public STRUCT_MIRROR_BASE(unpack_event_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_event_base);
  STRUCT_MIRROR_ITEM_CTRL(plastic);
  STRUCT_MIRROR_TYPE(plastic_subev) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(plastic);
  STRUCT_MIRROR_FCNS_DECL(unpack_event);
};
#endif//USER_DEF_unpack_event

#ifndef USER_DEF_unpack_sticky_event
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(unpack_sticky_event) : public STRUCT_MIRROR_BASE(unpack_sticky_event_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_sticky_event_base);
  STRUCT_MIRROR_FCNS_DECL(unpack_sticky_event);
};
#endif//USER_DEF_unpack_sticky_event

#include "gen/default_mirror_undef.hh"


/** END_MIRROR_STRUCT *************************************************/


/** BEGIN_MIRROR_DECL_STRUCT *******************************************
 *
 * Mirror structure names.
 *
 * Do not edit - automatically generated.
 */

#include "gen/default_mirror_define.hh"

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(ADC_DATA);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(BARRIER);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(DUMMY);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(SKIP);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(TAMEX4_EPOCH_DATA);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(TAMEX4_HEADER);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(TAMEX4_PADDING);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(TAMEX4_TIME_DATA);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(TAMEX4_SFP);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(TAMEX_SFP);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(TDC_DATA);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(TDC_ERROR);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(TDC_HEADER);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(TDC_TRAILER);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(TIMESTAMP_WHITERABBIT);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(TIMESTAMP_WHITERABBIT_EXTENDED);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(VME_CAEN_V1290_FRS);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(VME_CAEN_V792_FRS);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(VME_CAEN_V830_FRS);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(WR_MULTI);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(aida_subev);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(fatima_tamex_subev);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(fatima_vme_subev);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(frs_crate_subev);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(frs_main_crate_subev);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(frs_tof_crate_subev);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(frs_tpat_subev);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(frs_tpc_crate_subev);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(frs_whiterabbit_subev);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(germanium_subev);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(plastic_subev);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(unpack_event);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(unpack_sticky_event);

#include "gen/default_mirror_undef.hh"


/** END_MIRROR_DECL_STRUCT ********************************************/


/** BEGIN_FUNCTION_CALL_PER_MEMBER *************************************
 *
 * Recursive function calls per member.
 *
 * Do not edit - automatically generated.
 */

#include "gen/default_fcncall_define.hh"

#ifndef USER_DEF_ADC_DATA
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(ADC_DATA)::FCNCALL_NAME(ADC_DATA)
{
  FCNCALL_INIT;
  FCNCALL_RET;
}
#endif//USER_DEF_ADC_DATA

#ifndef USER_DEF_BARRIER
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(BARRIER)::FCNCALL_NAME(BARRIER)
{
  FCNCALL_INIT;
  FCNCALL_RET;
}
#endif//USER_DEF_BARRIER

#ifndef USER_DEF_DUMMY
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(DUMMY)::FCNCALL_NAME(DUMMY)
{
  FCNCALL_INIT;
  FCNCALL_RET;
}
#endif//USER_DEF_DUMMY

#ifndef USER_DEF_SKIP
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(SKIP)::FCNCALL_NAME(SKIP)
{
  FCNCALL_INIT;
  FCNCALL_RET;
}
#endif//USER_DEF_SKIP

#ifndef USER_DEF_TAMEX4_EPOCH_DATA
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(TAMEX4_EPOCH_DATA)::FCNCALL_NAME(TAMEX4_EPOCH_DATA)
{
  FCNCALL_INIT;
  FCNCALL_RET;
}
#endif//USER_DEF_TAMEX4_EPOCH_DATA

#ifndef USER_DEF_TAMEX4_HEADER
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(TAMEX4_HEADER)::FCNCALL_NAME(TAMEX4_HEADER)
{
  FCNCALL_INIT;
  // raw_list_ii_zero_suppress<DATA16,DATA16,64> post_trig_ns;
  {
  FCNCALL_SUBNAME("post_trig_ns");
  { FCNCALL_CALL_CTRL_WRAP(post_trig_ns,post_trig_ns.FCNCALL_CALL(post_trig_ns)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_list_ii_zero_suppress<DATA16,DATA16,64> pre_trig_ns;
  {
  FCNCALL_SUBNAME("pre_trig_ns");
  { FCNCALL_CALL_CTRL_WRAP(pre_trig_ns,pre_trig_ns.FCNCALL_CALL(pre_trig_ns)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_TAMEX4_HEADER

#ifndef USER_DEF_TAMEX4_PADDING
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(TAMEX4_PADDING)::FCNCALL_NAME(TAMEX4_PADDING)
{
  FCNCALL_INIT;
  FCNCALL_RET;
}
#endif//USER_DEF_TAMEX4_PADDING

#ifndef USER_DEF_TAMEX4_TIME_DATA
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(TAMEX4_TIME_DATA)::FCNCALL_NAME(TAMEX4_TIME_DATA)
{
  FCNCALL_INIT;
  FCNCALL_RET;
}
#endif//USER_DEF_TAMEX4_TIME_DATA

#ifndef USER_DEF_TAMEX4_SFP
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(TAMEX4_SFP)::FCNCALL_NAME(TAMEX4_SFP)
{
  FCNCALL_INIT;
  // raw_list_ii_zero_suppress<DATA12,DATA12,512> time_coarse;
  {
  FCNCALL_SUBNAME("time_coarse");
  { FCNCALL_CALL_CTRL_WRAP(time_coarse,time_coarse.FCNCALL_CALL(time_coarse)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_list_ii_zero_suppress<DATA12,DATA12,512> time_fine;
  {
  FCNCALL_SUBNAME("time_fine");
  { FCNCALL_CALL_CTRL_WRAP(time_fine,time_fine.FCNCALL_CALL(time_fine)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_list_ii_zero_suppress<DATA12,DATA12,512> time_edge;
  {
  FCNCALL_SUBNAME("time_edge");
  { FCNCALL_CALL_CTRL_WRAP(time_edge,time_edge.FCNCALL_CALL(time_edge)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_list_ii_zero_suppress<DATA12,DATA12,512> time_channel;
  {
  FCNCALL_SUBNAME("time_channel");
  { FCNCALL_CALL_CTRL_WRAP(time_channel,time_channel.FCNCALL_CALL(time_channel)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_list_ii_zero_suppress<DATA32,DATA32,512> time_epoch;
  {
  FCNCALL_SUBNAME("time_epoch");
  { FCNCALL_CALL_CTRL_WRAP(time_epoch,time_epoch.FCNCALL_CALL(time_epoch)); }
  FCNCALL_SUBNAME_END;
  }
  // TAMEX4_TIME_DATA time;
  {
  FCNCALL_SUBNAME("time");
  { FCNCALL_CALL_CTRL_WRAP(time,time.FCNCALL_CALL(time)); }
  FCNCALL_SUBNAME_END;
  }
  // TAMEX4_EPOCH_DATA epoch;
  {
  FCNCALL_SUBNAME("epoch");
  { FCNCALL_CALL_CTRL_WRAP(epoch,epoch.FCNCALL_CALL(epoch)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_TAMEX4_SFP

#ifndef USER_DEF_TAMEX_SFP
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(TAMEX_SFP)::FCNCALL_NAME(TAMEX_SFP)
{
  FCNCALL_INIT;
  // TAMEX4_SFP card[5];
  {
  FCNCALL_SUBNAME("card");
  FCNCALL_FOR(__i0,5)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(card__i0,,__i0,card[__i0].FCNCALL_CALL(card[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_TAMEX_SFP

#ifndef USER_DEF_TDC_DATA
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(TDC_DATA)::FCNCALL_NAME(TDC_DATA)
{
  FCNCALL_INIT;
  // DATA8 multihit;
  {
  FCNCALL_SUBNAME("multihit");
  { FCNCALL_CALL_CTRL_WRAP(multihit,multihit.FCNCALL_CALL(multihit)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_TDC_DATA

#ifndef USER_DEF_TDC_ERROR
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(TDC_ERROR)::FCNCALL_NAME(TDC_ERROR)
{
  FCNCALL_INIT;
  FCNCALL_RET;
}
#endif//USER_DEF_TDC_ERROR

#ifndef USER_DEF_TDC_HEADER
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(TDC_HEADER)::FCNCALL_NAME(TDC_HEADER)
{
  FCNCALL_INIT;
  FCNCALL_RET;
}
#endif//USER_DEF_TDC_HEADER

#ifndef USER_DEF_TDC_TRAILER
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(TDC_TRAILER)::FCNCALL_NAME(TDC_TRAILER)
{
  FCNCALL_INIT;
  FCNCALL_RET;
}
#endif//USER_DEF_TDC_TRAILER

#ifndef USER_DEF_TIMESTAMP_WHITERABBIT
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(TIMESTAMP_WHITERABBIT)::FCNCALL_NAME(TIMESTAMP_WHITERABBIT)
{
  FCNCALL_INIT;
  // DATA12 subsystem_id;
  {
  FCNCALL_SUBNAME("subsystem_id");
  { FCNCALL_CALL_CTRL_WRAP(subsystem_id,subsystem_id.FCNCALL_CALL(subsystem_id)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA16 t1;
  {
  FCNCALL_SUBNAME("t1");
  { FCNCALL_CALL_CTRL_WRAP(t1,t1.FCNCALL_CALL(t1)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA16 t2;
  {
  FCNCALL_SUBNAME("t2");
  { FCNCALL_CALL_CTRL_WRAP(t2,t2.FCNCALL_CALL(t2)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA16 t3;
  {
  FCNCALL_SUBNAME("t3");
  { FCNCALL_CALL_CTRL_WRAP(t3,t3.FCNCALL_CALL(t3)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA16 t4;
  {
  FCNCALL_SUBNAME("t4");
  { FCNCALL_CALL_CTRL_WRAP(t4,t4.FCNCALL_CALL(t4)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_TIMESTAMP_WHITERABBIT

#ifndef USER_DEF_TIMESTAMP_WHITERABBIT_EXTENDED
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(TIMESTAMP_WHITERABBIT_EXTENDED)::FCNCALL_NAME(TIMESTAMP_WHITERABBIT_EXTENDED)
{
  FCNCALL_INIT;
  // DATA16 subsystem_id;
  {
  FCNCALL_SUBNAME("subsystem_id");
  { FCNCALL_CALL_CTRL_WRAP(subsystem_id,subsystem_id.FCNCALL_CALL(subsystem_id)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA16 t1;
  {
  FCNCALL_SUBNAME("t1");
  { FCNCALL_CALL_CTRL_WRAP(t1,t1.FCNCALL_CALL(t1)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA16 t2;
  {
  FCNCALL_SUBNAME("t2");
  { FCNCALL_CALL_CTRL_WRAP(t2,t2.FCNCALL_CALL(t2)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA16 t3;
  {
  FCNCALL_SUBNAME("t3");
  { FCNCALL_CALL_CTRL_WRAP(t3,t3.FCNCALL_CALL(t3)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA16 t4;
  {
  FCNCALL_SUBNAME("t4");
  { FCNCALL_CALL_CTRL_WRAP(t4,t4.FCNCALL_CALL(t4)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_TIMESTAMP_WHITERABBIT_EXTENDED

#ifndef USER_DEF_VME_CAEN_V1290_FRS
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(VME_CAEN_V1290_FRS)::FCNCALL_NAME(VME_CAEN_V1290_FRS)
{
  FCNCALL_INIT;
  // raw_array_multi_zero_suppress<DATA24,DATA24,32,32> data;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(data,data.FCNCALL_CALL(data)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_list_ii_zero_suppress<DATA8,DATA8,32> channel;
  {
  FCNCALL_SUBNAME("channel");
  { FCNCALL_CALL_CTRL_WRAP(channel,channel.FCNCALL_CALL(channel)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_list_ii_zero_suppress<DATA8,DATA8,32> leadOrTrail;
  {
  FCNCALL_SUBNAME("leadOrTrail");
  { FCNCALL_CALL_CTRL_WRAP(leadOrTrail,leadOrTrail.FCNCALL_CALL(leadOrTrail)); }
  FCNCALL_SUBNAME_END;
  }
  // TDC_HEADER tdc_header;
  {
  FCNCALL_SUBNAME("tdc_header");
  { FCNCALL_CALL_CTRL_WRAP(tdc_header,tdc_header.FCNCALL_CALL(tdc_header)); }
  FCNCALL_SUBNAME_END;
  }
  // TDC_DATA measurement;
  {
  FCNCALL_SUBNAME("measurement");
  { FCNCALL_CALL_CTRL_WRAP(measurement,measurement.FCNCALL_CALL(measurement)); }
  FCNCALL_SUBNAME_END;
  }
  // TDC_ERROR tdc_error;
  {
  FCNCALL_SUBNAME("tdc_error");
  { FCNCALL_CALL_CTRL_WRAP(tdc_error,tdc_error.FCNCALL_CALL(tdc_error)); }
  FCNCALL_SUBNAME_END;
  }
  // TDC_TRAILER tdc_trailer;
  {
  FCNCALL_SUBNAME("tdc_trailer");
  { FCNCALL_CALL_CTRL_WRAP(tdc_trailer,tdc_trailer.FCNCALL_CALL(tdc_trailer)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_VME_CAEN_V1290_FRS

#ifndef USER_DEF_VME_CAEN_V792_FRS
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(VME_CAEN_V792_FRS)::FCNCALL_NAME(VME_CAEN_V792_FRS)
{
  FCNCALL_INIT;
  FCNCALL_RET;
}
#endif//USER_DEF_VME_CAEN_V792_FRS

#ifndef USER_DEF_VME_CAEN_V830_FRS
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(VME_CAEN_V830_FRS)::FCNCALL_NAME(VME_CAEN_V830_FRS)
{
  FCNCALL_INIT;
  FCNCALL_RET;
}
#endif//USER_DEF_VME_CAEN_V830_FRS

#ifndef USER_DEF_WR_MULTI
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(WR_MULTI)::FCNCALL_NAME(WR_MULTI)
{
  FCNCALL_INIT;
  // DATA32 time_hi;
  {
  FCNCALL_SUBNAME("time_hi");
  { FCNCALL_CALL_CTRL_WRAP(time_hi,time_hi.FCNCALL_CALL(time_hi)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA32 time_lo;
  {
  FCNCALL_SUBNAME("time_lo");
  { FCNCALL_CALL_CTRL_WRAP(time_lo,time_lo.FCNCALL_CALL(time_lo)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_WR_MULTI

#ifndef USER_DEF_aida_subev
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(aida_subev)::FCNCALL_NAME(aida_subev)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // TIMESTAMP_WHITERABBIT ts;
  {
  FCNCALL_SUBNAME("ts");
  { FCNCALL_CALL_CTRL_WRAP(ts,ts.FCNCALL_CALL(ts)); }
  FCNCALL_SUBNAME_END;
  }
  // EXT_AIDA data;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(data,data.FCNCALL_CALL(data)); }
  FCNCALL_SUBNAME_END;
  }
  // DUMMY dummy;
  {
  FCNCALL_SUBNAME("dummy");
  { FCNCALL_CALL_CTRL_WRAP(dummy,dummy.FCNCALL_CALL(dummy)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_aida_subev

#ifndef USER_DEF_fatima_tamex_subev
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(fatima_tamex_subev)::FCNCALL_NAME(fatima_tamex_subev)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // TIMESTAMP_WHITERABBIT_EXTENDED ts;
  {
  FCNCALL_SUBNAME("ts");
  { FCNCALL_CALL_CTRL_WRAP(ts,ts.FCNCALL_CALL(ts)); }
  FCNCALL_SUBNAME_END;
  }
  // EXT_FATIMA_TAMEX data;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(data,data.FCNCALL_CALL(data)); }
  FCNCALL_SUBNAME_END;
  }
  // DUMMY dummy;
  {
  FCNCALL_SUBNAME("dummy");
  { FCNCALL_CALL_CTRL_WRAP(dummy,dummy.FCNCALL_CALL(dummy)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_fatima_tamex_subev

#ifndef USER_DEF_fatima_vme_subev
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(fatima_vme_subev)::FCNCALL_NAME(fatima_vme_subev)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // TIMESTAMP_WHITERABBIT_EXTENDED ts;
  {
  FCNCALL_SUBNAME("ts");
  { FCNCALL_CALL_CTRL_WRAP(ts,ts.FCNCALL_CALL(ts)); }
  FCNCALL_SUBNAME_END;
  }
  // EXT_FATIMA_VME data;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(data,data.FCNCALL_CALL(data)); }
  FCNCALL_SUBNAME_END;
  }
  // DUMMY dummy;
  {
  FCNCALL_SUBNAME("dummy");
  { FCNCALL_CALL_CTRL_WRAP(dummy,dummy.FCNCALL_CALL(dummy)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_fatima_vme_subev

#ifndef USER_DEF_frs_crate_subev
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(frs_crate_subev)::FCNCALL_NAME(frs_crate_subev)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // EXT_FRS data;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(data,data.FCNCALL_CALL(data)); }
  FCNCALL_SUBNAME_END;
  }
  // DUMMY dummy;
  {
  FCNCALL_SUBNAME("dummy");
  { FCNCALL_CALL_CTRL_WRAP(dummy,dummy.FCNCALL_CALL(dummy)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_frs_crate_subev

#ifndef USER_DEF_frs_main_crate_subev
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(frs_main_crate_subev)::FCNCALL_NAME(frs_main_crate_subev)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // EXT_FRS data;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(data,data.FCNCALL_CALL(data)); }
  FCNCALL_SUBNAME_END;
  }
  // DUMMY dummy;
  {
  FCNCALL_SUBNAME("dummy");
  { FCNCALL_CALL_CTRL_WRAP(dummy,dummy.FCNCALL_CALL(dummy)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_frs_main_crate_subev

#ifndef USER_DEF_frs_tof_crate_subev
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(frs_tof_crate_subev)::FCNCALL_NAME(frs_tof_crate_subev)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // EXT_FRS data;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(data,data.FCNCALL_CALL(data)); }
  FCNCALL_SUBNAME_END;
  }
  // DUMMY dummy;
  {
  FCNCALL_SUBNAME("dummy");
  { FCNCALL_CALL_CTRL_WRAP(dummy,dummy.FCNCALL_CALL(dummy)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_frs_tof_crate_subev

#ifndef USER_DEF_frs_tpat_subev
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(frs_tpat_subev)::FCNCALL_NAME(frs_tpat_subev)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // EXT_FRS data;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(data,data.FCNCALL_CALL(data)); }
  FCNCALL_SUBNAME_END;
  }
  // DUMMY dummy;
  {
  FCNCALL_SUBNAME("dummy");
  { FCNCALL_CALL_CTRL_WRAP(dummy,dummy.FCNCALL_CALL(dummy)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_frs_tpat_subev

#ifndef USER_DEF_frs_tpc_crate_subev
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(frs_tpc_crate_subev)::FCNCALL_NAME(frs_tpc_crate_subev)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // EXT_FRS data;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(data,data.FCNCALL_CALL(data)); }
  FCNCALL_SUBNAME_END;
  }
  // DUMMY dummy;
  {
  FCNCALL_SUBNAME("dummy");
  { FCNCALL_CALL_CTRL_WRAP(dummy,dummy.FCNCALL_CALL(dummy)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_frs_tpc_crate_subev

#ifndef USER_DEF_frs_whiterabbit_subev
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(frs_whiterabbit_subev)::FCNCALL_NAME(frs_whiterabbit_subev)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // TIMESTAMP_WHITERABBIT ts;
  {
  FCNCALL_SUBNAME("ts");
  { FCNCALL_CALL_CTRL_WRAP(ts,ts.FCNCALL_CALL(ts)); }
  FCNCALL_SUBNAME_END;
  }
  // DUMMY dummy;
  {
  FCNCALL_SUBNAME("dummy");
  { FCNCALL_CALL_CTRL_WRAP(dummy,dummy.FCNCALL_CALL(dummy)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_frs_whiterabbit_subev

#ifndef USER_DEF_germanium_subev
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(germanium_subev)::FCNCALL_NAME(germanium_subev)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // TIMESTAMP_WHITERABBIT ts;
  {
  FCNCALL_SUBNAME("ts");
  { FCNCALL_CALL_CTRL_WRAP(ts,ts.FCNCALL_CALL(ts)); }
  FCNCALL_SUBNAME_END;
  }
  // EXT_GERMANIUM data;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(data,data.FCNCALL_CALL(data)); }
  FCNCALL_SUBNAME_END;
  }
  // DUMMY dummy;
  {
  FCNCALL_SUBNAME("dummy");
  { FCNCALL_CALL_CTRL_WRAP(dummy,dummy.FCNCALL_CALL(dummy)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_germanium_subev

#ifndef USER_DEF_plastic_subev
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(plastic_subev)::FCNCALL_NAME(plastic_subev)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // EXT_PLASTIC_TP data_tp;
  {
  FCNCALL_SUBNAME("data_tp");
  { FCNCALL_CALL_CTRL_WRAP(data_tp,data_tp.FCNCALL_CALL(data_tp)); }
  FCNCALL_SUBNAME_END;
  }
  // TAMEX4_PADDING padding;
  {
  FCNCALL_SUBNAME("padding");
  { FCNCALL_CALL_CTRL_WRAP(padding,padding.FCNCALL_CALL(padding)); }
  FCNCALL_SUBNAME_END;
  }
  // TAMEX_SFP crate[1];
  {
  FCNCALL_SUBNAME("crate");
  FCNCALL_FOR(__i0,1)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(crate__i0,,__i0,crate[__i0].FCNCALL_CALL(crate[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // TAMEX4_HEADER header;
  {
  FCNCALL_SUBNAME("header");
  { FCNCALL_CALL_CTRL_WRAP(header,header.FCNCALL_CALL(header)); }
  FCNCALL_SUBNAME_END;
  }
  // TIMESTAMP_WHITERABBIT ts;
  {
  FCNCALL_SUBNAME("ts");
  { FCNCALL_CALL_CTRL_WRAP(ts,ts.FCNCALL_CALL(ts)); }
  FCNCALL_SUBNAME_END;
  }
  // DUMMY dummy;
  {
  FCNCALL_SUBNAME("dummy");
  { FCNCALL_CALL_CTRL_WRAP(dummy,dummy.FCNCALL_CALL(dummy)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_plastic_subev

#ifndef USER_DEF_unpack_event
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(unpack_event)::FCNCALL_NAME(unpack_event)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_event_base,FCNCALL_CLASS_NAME(unpack_event_base)::FCNCALL_CALL_BASE());
  // plastic_subev plastic;
  {
  FCNCALL_SUBNAME("plastic");
  { FCNCALL_CALL_CTRL_WRAP(plastic,plastic.FCNCALL_CALL(plastic)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_unpack_event

#ifndef USER_DEF_unpack_sticky_event
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(unpack_sticky_event)::FCNCALL_NAME(unpack_sticky_event)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_sticky_event_base,FCNCALL_CLASS_NAME(unpack_sticky_event_base)::FCNCALL_CALL_BASE());
  FCNCALL_RET;
}
#endif//USER_DEF_unpack_sticky_event

#include "gen/default_fcncall_undef.hh"


/** END_FUNCTION_CALL_PER_MEMBER **************************************/


/** BEGIN_CORR_STRUCT **************************************************
 *
 * Correlation structure.
 *
 * Do not edit - automatically generated.
 */

// Corr struct for: ADC_DATA
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: ADC_DATA
// .ADC_DATA// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: ADC_DATA
// .ADC_DATA// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: ADC_DATA
// .ADC_DATA
// Corr struct for: BARRIER
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: BARRIER
// .BARRIER// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: BARRIER
// .BARRIER// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: BARRIER
// .BARRIER
// Corr struct for: DUMMY
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: DUMMY
// .DUMMY// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: DUMMY
// .DUMMY// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: DUMMY
// .DUMMY
// Corr struct for: SKIP
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: SKIP
// .SKIP// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: SKIP
// .SKIP// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: SKIP
// .SKIP
// Corr struct for: TAMEX4_EPOCH_DATA
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TAMEX4_EPOCH_DATA
// .TAMEX4_EPOCH_DATA// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TAMEX4_EPOCH_DATA
// .TAMEX4_EPOCH_DATA// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TAMEX4_EPOCH_DATA
// .TAMEX4_EPOCH_DATA
// Corr struct for: TAMEX4_HEADER
// raw_list_ii_zero_suppress  .post_trig_ns(DATA16)[64]
// raw_list_ii_zero_suppress  .pre_trig_ns(DATA16)[64]
// DATA16 .post_trig_ns[64]
// DATA16 .pre_trig_ns[64]
// 
// size= 1  chunks=128  mem= 128  line=256  total=32768
// size=64  chunks=  2  mem= 128  line=130  total=16640
// size=128  chunks=  1  mem= 128  line=129  total=16512
// 
// corr structure: TAMEX4_HEADER
  // DATA16 .post_trig_ns[64]
  // DATA16 .pre_trig_ns[64]
// .TAMEX4_HEADER/128/.post_trig_ns/64/[64]
                   // .pre_trig_ns/64/[64]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TAMEX4_HEADER
// .TAMEX4_HEADER// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TAMEX4_HEADER
// .TAMEX4_HEADER
// Corr struct for: TAMEX4_PADDING
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TAMEX4_PADDING
// .TAMEX4_PADDING// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TAMEX4_PADDING
// .TAMEX4_PADDING// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TAMEX4_PADDING
// .TAMEX4_PADDING
// Corr struct for: TAMEX4_TIME_DATA
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TAMEX4_TIME_DATA
// .TAMEX4_TIME_DATA// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TAMEX4_TIME_DATA
// .TAMEX4_TIME_DATA// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TAMEX4_TIME_DATA
// .TAMEX4_TIME_DATA
// Corr struct for: TAMEX4_SFP
// raw_list_ii_zero_suppress  .time_coarse(DATA12)[512]
// raw_list_ii_zero_suppress  .time_fine(DATA12)[512]
// raw_list_ii_zero_suppress  .time_edge(DATA12)[512]
// raw_list_ii_zero_suppress  .time_channel(DATA12)[512]
// raw_list_ii_zero_suppress  .time_epoch(DATA32)[512]
  // ---
// TAMEX4_TIME_DATA  .time
// TAMEX4_EPOCH_DATA  .epoch
// DATA12 .time_coarse[512]
// DATA12 .time_fine[512]
// DATA12 .time_edge[512]
// DATA12 .time_channel[512]
// 
// size= 1  chunks=2048  mem=2048  line=4096  total=8388608
// size=512  chunks=  4  mem=2048  line=2052  total=4202496
// size=2048  chunks=  1  mem=2048  line=2049  total=4196352
// 
// corr structure: TAMEX4_SFP
  // DATA12 .time_coarse[512]
  // DATA12 .time_fine[512]
  // DATA12 .time_edge[512]
  // DATA12 .time_channel[512]
// .TAMEX4_SFP/2048/.time_coarse/512/[512]
                 // .time_fine/512/[512]
                 // .time_edge/512/[512]
                 // .time_channel/512/[512]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TAMEX4_SFP
// .TAMEX4_SFP// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TAMEX4_SFP
// .TAMEX4_SFP
// Corr struct for: TAMEX_SFP
// TAMEX4_SFP  .card[5]
  // raw_list_ii_zero_suppress  .time_coarse(DATA12)[512]
  // raw_list_ii_zero_suppress  .time_fine(DATA12)[512]
  // raw_list_ii_zero_suppress  .time_edge(DATA12)[512]
  // raw_list_ii_zero_suppress  .time_channel(DATA12)[512]
  // raw_list_ii_zero_suppress  .time_epoch(DATA32)[512]
    // ---
  // TAMEX4_TIME_DATA  .time
  // TAMEX4_EPOCH_DATA  .epoch
// DATA12 .card[5].time_coarse[512]
// DATA12 .card[5].time_fine[512]
// DATA12 .card[5].time_edge[512]
// DATA12 .card[5].time_channel[512]
// 
// size= 1  chunks=10240  mem=10240  line=20480  total=209715200
// size=512  chunks= 20  mem=10240  line=10260  total=105062400
// size=2048  chunks=  5  mem=10240  line=10245  total=104908800
// size=10240  chunks=  1  mem=10240  line=10241  total=104867840
// 
// corr structure: TAMEX_SFP
  // DATA12 .card[5].time_coarse[512]
  // DATA12 .card[5].time_fine[512]
  // DATA12 .card[5].time_edge[512]
  // DATA12 .card[5].time_channel[512]
// .TAMEX_SFP/10240/.card/10240/[5]/2048/.time_coarse/512/[512]
                                      // .time_fine/512/[512]
                                      // .time_edge/512/[512]
                                      // .time_channel/512/[512]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TAMEX_SFP
// .TAMEX_SFP// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TAMEX_SFP
// .TAMEX_SFP
// Corr struct for: TDC_DATA
// DATA8  .multihit
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TDC_DATA
// .TDC_DATA// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TDC_DATA
// .TDC_DATA// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TDC_DATA
// .TDC_DATA
// Corr struct for: TDC_ERROR
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TDC_ERROR
// .TDC_ERROR// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TDC_ERROR
// .TDC_ERROR// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TDC_ERROR
// .TDC_ERROR
// Corr struct for: TDC_HEADER
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TDC_HEADER
// .TDC_HEADER// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TDC_HEADER
// .TDC_HEADER// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TDC_HEADER
// .TDC_HEADER
// Corr struct for: TDC_TRAILER
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TDC_TRAILER
// .TDC_TRAILER// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TDC_TRAILER
// .TDC_TRAILER// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TDC_TRAILER
// .TDC_TRAILER
// Corr struct for: TIMESTAMP_WHITERABBIT
// DATA12  .subsystem_id
// DATA16  .t1
// DATA16  .t2
// DATA16  .t3
// DATA16  .t4
// DATA12 .subsystem_id
// DATA16 .t1
// DATA16 .t2
// DATA16 .t3
// DATA16 .t4
// 
// size= 1  chunks=  5  mem=   5  line=10  total=50
// size= 5  chunks=  1  mem=   5  line=6  total=30
// 
// corr structure: TIMESTAMP_WHITERABBIT
  // DATA12 .subsystem_id
  // DATA16 .t1
  // DATA16 .t2
  // DATA16 .t3
  // DATA16 .t4
// .TIMESTAMP_WHITERABBIT/5/.subsystem_id
                         // .t1
                         // .t2
                         // .t3
                         // .t4// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TIMESTAMP_WHITERABBIT
// .TIMESTAMP_WHITERABBIT// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TIMESTAMP_WHITERABBIT
// .TIMESTAMP_WHITERABBIT
// Corr struct for: TIMESTAMP_WHITERABBIT_EXTENDED
// DATA16  .subsystem_id
// DATA16  .t1
// DATA16  .t2
// DATA16  .t3
// DATA16  .t4
// DATA16 .subsystem_id
// DATA16 .t1
// DATA16 .t2
// DATA16 .t3
// DATA16 .t4
// 
// size= 1  chunks=  5  mem=   5  line=10  total=50
// size= 5  chunks=  1  mem=   5  line=6  total=30
// 
// corr structure: TIMESTAMP_WHITERABBIT_EXTENDED
  // DATA16 .subsystem_id
  // DATA16 .t1
  // DATA16 .t2
  // DATA16 .t3
  // DATA16 .t4
// .TIMESTAMP_WHITERABBIT_EXTENDED/5/.subsystem_id
                                  // .t1
                                  // .t2
                                  // .t3
                                  // .t4// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TIMESTAMP_WHITERABBIT_EXTENDED
// .TIMESTAMP_WHITERABBIT_EXTENDED// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TIMESTAMP_WHITERABBIT_EXTENDED
// .TIMESTAMP_WHITERABBIT_EXTENDED
// Corr struct for: VME_CAEN_V1290_FRS
// raw_array_multi_zero_suppress  .data(DATA24)[32][32]
  // ---
// raw_list_ii_zero_suppress  .channel(DATA8)[32]
  // ---
// raw_list_ii_zero_suppress  .leadOrTrail(DATA8)[32]
  // ---
// TDC_HEADER  .tdc_header
// TDC_DATA  .measurement
  // DATA8  .multihit
    // ---
// TDC_ERROR  .tdc_error
// TDC_TRAILER  .tdc_trailer
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1290_FRS
// .VME_CAEN_V1290_FRS// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1290_FRS
// .VME_CAEN_V1290_FRS// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1290_FRS
// .VME_CAEN_V1290_FRS
// Corr struct for: VME_CAEN_V792_FRS
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V792_FRS
// .VME_CAEN_V792_FRS// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V792_FRS
// .VME_CAEN_V792_FRS// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V792_FRS
// .VME_CAEN_V792_FRS
// Corr struct for: VME_CAEN_V830_FRS
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V830_FRS
// .VME_CAEN_V830_FRS// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V830_FRS
// .VME_CAEN_V830_FRS// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V830_FRS
// .VME_CAEN_V830_FRS
// Corr struct for: WR_MULTI
// DATA32  .time_hi
  // ---
// DATA32  .time_lo
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: WR_MULTI
// .WR_MULTI// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: WR_MULTI
// .WR_MULTI// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: WR_MULTI
// .WR_MULTI
// Corr struct for: aida_subev
//  : public unpack_subevent_base
// ---
// TIMESTAMP_WHITERABBIT  .ts
  // DATA12  .subsystem_id
  // DATA16  .t1
  // DATA16  .t2
  // DATA16  .t3
  // DATA16  .t4
// EXT_AIDA  .data
// DUMMY  .dummy
// DATA12 .ts.subsystem_id
// DATA16 .ts.t1
// DATA16 .ts.t2
// DATA16 .ts.t3
// DATA16 .ts.t4
// 
// size= 1  chunks=  5  mem=   5  line=10  total=50
// size= 5  chunks=  1  mem=   5  line=6  total=30
// 
// corr structure: aida_subev
  // DATA12 .ts.subsystem_id
  // DATA16 .ts.t1
  // DATA16 .ts.t2
  // DATA16 .ts.t3
  // DATA16 .ts.t4
// .aida_subev/5/.ts/5/.subsystem_id
                    // .t1
                    // .t2
                    // .t3
                    // .t4// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: aida_subev
// .aida_subev// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: aida_subev
// .aida_subev
// Corr struct for: fatima_tamex_subev
//  : public unpack_subevent_base
// ---
// TIMESTAMP_WHITERABBIT_EXTENDED  .ts
  // DATA16  .subsystem_id
  // DATA16  .t1
  // DATA16  .t2
  // DATA16  .t3
  // DATA16  .t4
// EXT_FATIMA_TAMEX  .data
// DUMMY  .dummy
// DATA16 .ts.subsystem_id
// DATA16 .ts.t1
// DATA16 .ts.t2
// DATA16 .ts.t3
// DATA16 .ts.t4
// 
// size= 1  chunks=  5  mem=   5  line=10  total=50
// size= 5  chunks=  1  mem=   5  line=6  total=30
// 
// corr structure: fatima_tamex_subev
  // DATA16 .ts.subsystem_id
  // DATA16 .ts.t1
  // DATA16 .ts.t2
  // DATA16 .ts.t3
  // DATA16 .ts.t4
// .fatima_tamex_subev/5/.ts/5/.subsystem_id
                            // .t1
                            // .t2
                            // .t3
                            // .t4// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: fatima_tamex_subev
// .fatima_tamex_subev// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: fatima_tamex_subev
// .fatima_tamex_subev
// Corr struct for: fatima_vme_subev
//  : public unpack_subevent_base
// ---
// TIMESTAMP_WHITERABBIT_EXTENDED  .ts
  // DATA16  .subsystem_id
  // DATA16  .t1
  // DATA16  .t2
  // DATA16  .t3
  // DATA16  .t4
// EXT_FATIMA_VME  .data
// DUMMY  .dummy
// DATA16 .ts.subsystem_id
// DATA16 .ts.t1
// DATA16 .ts.t2
// DATA16 .ts.t3
// DATA16 .ts.t4
// 
// size= 1  chunks=  5  mem=   5  line=10  total=50
// size= 5  chunks=  1  mem=   5  line=6  total=30
// 
// corr structure: fatima_vme_subev
  // DATA16 .ts.subsystem_id
  // DATA16 .ts.t1
  // DATA16 .ts.t2
  // DATA16 .ts.t3
  // DATA16 .ts.t4
// .fatima_vme_subev/5/.ts/5/.subsystem_id
                          // .t1
                          // .t2
                          // .t3
                          // .t4// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: fatima_vme_subev
// .fatima_vme_subev// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: fatima_vme_subev
// .fatima_vme_subev
// Corr struct for: frs_crate_subev
//  : public unpack_subevent_base
// ---
// EXT_FRS  .data
// DUMMY  .dummy
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: frs_crate_subev
// .frs_crate_subev// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: frs_crate_subev
// .frs_crate_subev// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: frs_crate_subev
// .frs_crate_subev
// Corr struct for: frs_main_crate_subev
//  : public unpack_subevent_base
// ---
// EXT_FRS  .data
// DUMMY  .dummy
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: frs_main_crate_subev
// .frs_main_crate_subev// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: frs_main_crate_subev
// .frs_main_crate_subev// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: frs_main_crate_subev
// .frs_main_crate_subev
// Corr struct for: frs_tof_crate_subev
//  : public unpack_subevent_base
// ---
// EXT_FRS  .data
// DUMMY  .dummy
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: frs_tof_crate_subev
// .frs_tof_crate_subev// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: frs_tof_crate_subev
// .frs_tof_crate_subev// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: frs_tof_crate_subev
// .frs_tof_crate_subev
// Corr struct for: frs_tpat_subev
//  : public unpack_subevent_base
// ---
// EXT_FRS  .data
// DUMMY  .dummy
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: frs_tpat_subev
// .frs_tpat_subev// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: frs_tpat_subev
// .frs_tpat_subev// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: frs_tpat_subev
// .frs_tpat_subev
// Corr struct for: frs_tpc_crate_subev
//  : public unpack_subevent_base
// ---
// EXT_FRS  .data
// DUMMY  .dummy
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: frs_tpc_crate_subev
// .frs_tpc_crate_subev// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: frs_tpc_crate_subev
// .frs_tpc_crate_subev// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: frs_tpc_crate_subev
// .frs_tpc_crate_subev
// Corr struct for: frs_whiterabbit_subev
//  : public unpack_subevent_base
// ---
// TIMESTAMP_WHITERABBIT  .ts
  // DATA12  .subsystem_id
  // DATA16  .t1
  // DATA16  .t2
  // DATA16  .t3
  // DATA16  .t4
// DUMMY  .dummy
// DATA12 .ts.subsystem_id
// DATA16 .ts.t1
// DATA16 .ts.t2
// DATA16 .ts.t3
// DATA16 .ts.t4
// 
// size= 1  chunks=  5  mem=   5  line=10  total=50
// size= 5  chunks=  1  mem=   5  line=6  total=30
// 
// corr structure: frs_whiterabbit_subev
  // DATA12 .ts.subsystem_id
  // DATA16 .ts.t1
  // DATA16 .ts.t2
  // DATA16 .ts.t3
  // DATA16 .ts.t4
// .frs_whiterabbit_subev/5/.ts/5/.subsystem_id
                               // .t1
                               // .t2
                               // .t3
                               // .t4// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: frs_whiterabbit_subev
// .frs_whiterabbit_subev// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: frs_whiterabbit_subev
// .frs_whiterabbit_subev
// Corr struct for: germanium_subev
//  : public unpack_subevent_base
// ---
// TIMESTAMP_WHITERABBIT  .ts
  // DATA12  .subsystem_id
  // DATA16  .t1
  // DATA16  .t2
  // DATA16  .t3
  // DATA16  .t4
// EXT_GERMANIUM  .data
// DUMMY  .dummy
// DATA12 .ts.subsystem_id
// DATA16 .ts.t1
// DATA16 .ts.t2
// DATA16 .ts.t3
// DATA16 .ts.t4
// 
// size= 1  chunks=  5  mem=   5  line=10  total=50
// size= 5  chunks=  1  mem=   5  line=6  total=30
// 
// corr structure: germanium_subev
  // DATA12 .ts.subsystem_id
  // DATA16 .ts.t1
  // DATA16 .ts.t2
  // DATA16 .ts.t3
  // DATA16 .ts.t4
// .germanium_subev/5/.ts/5/.subsystem_id
                         // .t1
                         // .t2
                         // .t3
                         // .t4// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: germanium_subev
// .germanium_subev// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: germanium_subev
// .germanium_subev
// Corr struct for: plastic_subev
//  : public unpack_subevent_base
// ---
// EXT_PLASTIC_TP  .data_tp
// TAMEX4_PADDING  .padding
// TAMEX_SFP  .crate[1]
  // TAMEX4_SFP  .card[5]
    // raw_list_ii_zero_suppress  .time_coarse(DATA12)[512]
    // raw_list_ii_zero_suppress  .time_fine(DATA12)[512]
    // raw_list_ii_zero_suppress  .time_edge(DATA12)[512]
    // raw_list_ii_zero_suppress  .time_channel(DATA12)[512]
    // raw_list_ii_zero_suppress  .time_epoch(DATA32)[512]
      // ---
    // TAMEX4_TIME_DATA  .time
    // TAMEX4_EPOCH_DATA  .epoch
// TAMEX4_HEADER  .header
  // raw_list_ii_zero_suppress  .post_trig_ns(DATA16)[64]
  // raw_list_ii_zero_suppress  .pre_trig_ns(DATA16)[64]
// TIMESTAMP_WHITERABBIT  .ts
  // DATA12  .subsystem_id
  // DATA16  .t1
  // DATA16  .t2
  // DATA16  .t3
  // DATA16  .t4
// DUMMY  .dummy
// DATA12 .crate[1].card[5].time_coarse[512]
// DATA12 .crate[1].card[5].time_fine[512]
// DATA12 .crate[1].card[5].time_edge[512]
// DATA12 .crate[1].card[5].time_channel[512]
// DATA16 .header.post_trig_ns[64]
// DATA16 .header.pre_trig_ns[64]
// DATA12 .ts.subsystem_id
// DATA16 .ts.t1
// DATA16 .ts.t2
// DATA16 .ts.t3
// DATA16 .ts.t4
// 
// size= 1  chunks=10373  mem=10373  line=20746  total=215198258
// size= 5  chunks=10369  mem=51845  line=62214  total=645345822
// size=64  chunks=10243  mem=655552  line=665795  total=-1683643057
// size=128  chunks=10242  mem=1310976  line=1321218  total=820092426
// size=512  chunks= 22  mem=11264  line=11286  total=117069678
// size=2048  chunks=  7  mem=14336  line=14343  total=148779939
// size=10240  chunks=  3  mem=30720  line=30723  total=318689679
// size=10373  chunks=  1  mem=10373  line=10374  total=107609502
// 
// corr structure: plastic_subev
  // DATA12 .crate[1].card[5].time_coarse[512]
  // DATA12 .crate[1].card[5].time_fine[512]
  // DATA12 .crate[1].card[5].time_edge[512]
  // DATA12 .crate[1].card[5].time_channel[512]
  // DATA16 .header.post_trig_ns[64]
  // DATA16 .header.pre_trig_ns[64]
  // DATA12 .ts.subsystem_id
  // DATA16 .ts.t1
  // DATA16 .ts.t2
  // DATA16 .ts.t3
  // DATA16 .ts.t4
// .plastic_subev/10373/.crate/10240/[1]/10240/.card/10240/[5]/2048/.time_coarse/512/[512]
                                                                 // .time_fine/512/[512]
                                                                 // .time_edge/512/[512]
                                                                 // .time_channel/512/[512]
                     // .header/128/.post_trig_ns/64/[64]
                                 // .pre_trig_ns/64/[64]
                     // .ts/5/.subsystem_id
                           // .t1
                           // .t2
                           // .t3
                           // .t4// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: plastic_subev
// .plastic_subev// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: plastic_subev
// .plastic_subev
// Corr struct for: unpack_event
//  : public unpack_event_base
// ---
// plastic_subev  .plastic
  //  : public unpack_subevent_base
  // ---
  // EXT_PLASTIC_TP  .data_tp
  // TAMEX4_PADDING  .padding
  // TAMEX_SFP  .crate[1]
    // TAMEX4_SFP  .card[5]
      // raw_list_ii_zero_suppress  .time_coarse(DATA12)[512]
      // raw_list_ii_zero_suppress  .time_fine(DATA12)[512]
      // raw_list_ii_zero_suppress  .time_edge(DATA12)[512]
      // raw_list_ii_zero_suppress  .time_channel(DATA12)[512]
      // raw_list_ii_zero_suppress  .time_epoch(DATA32)[512]
        // ---
      // TAMEX4_TIME_DATA  .time
      // TAMEX4_EPOCH_DATA  .epoch
  // TAMEX4_HEADER  .header
    // raw_list_ii_zero_suppress  .post_trig_ns(DATA16)[64]
    // raw_list_ii_zero_suppress  .pre_trig_ns(DATA16)[64]
  // TIMESTAMP_WHITERABBIT  .ts
    // DATA12  .subsystem_id
    // DATA16  .t1
    // DATA16  .t2
    // DATA16  .t3
    // DATA16  .t4
  // DUMMY  .dummy
// DATA12 .plastic.crate[1].card[5].time_coarse[512]
// DATA12 .plastic.crate[1].card[5].time_fine[512]
// DATA12 .plastic.crate[1].card[5].time_edge[512]
// DATA12 .plastic.crate[1].card[5].time_channel[512]
// DATA16 .plastic.header.post_trig_ns[64]
// DATA16 .plastic.header.pre_trig_ns[64]
// DATA12 .plastic.ts.subsystem_id
// DATA16 .plastic.ts.t1
// DATA16 .plastic.ts.t2
// DATA16 .plastic.ts.t3
// DATA16 .plastic.ts.t4
// 
// size= 1  chunks=10373  mem=10373  line=20746  total=215198258
// size= 5  chunks=10369  mem=51845  line=62214  total=645345822
// size=64  chunks=10243  mem=655552  line=665795  total=-1683643057
// size=128  chunks=10242  mem=1310976  line=1321218  total=820092426
// size=512  chunks= 22  mem=11264  line=11286  total=117069678
// size=2048  chunks=  7  mem=14336  line=14343  total=148779939
// size=10240  chunks=  3  mem=30720  line=30723  total=318689679
// size=10373  chunks=  1  mem=10373  line=10374  total=107609502
// 
// corr structure: unpack_event
  // DATA12 .plastic.crate[1].card[5].time_coarse[512]
  // DATA12 .plastic.crate[1].card[5].time_fine[512]
  // DATA12 .plastic.crate[1].card[5].time_edge[512]
  // DATA12 .plastic.crate[1].card[5].time_channel[512]
  // DATA16 .plastic.header.post_trig_ns[64]
  // DATA16 .plastic.header.pre_trig_ns[64]
  // DATA12 .plastic.ts.subsystem_id
  // DATA16 .plastic.ts.t1
  // DATA16 .plastic.ts.t2
  // DATA16 .plastic.ts.t3
  // DATA16 .plastic.ts.t4
// .unpack_event/10373/.plastic/10373/.crate/10240/[1]/10240/.card/10240/[5]/2048/.time_coarse/512/[512]
                                                                               // .time_fine/512/[512]
                                                                               // .time_edge/512/[512]
                                                                               // .time_channel/512/[512]
                                   // .header/128/.post_trig_ns/64/[64]
                                               // .pre_trig_ns/64/[64]
                                   // .ts/5/.subsystem_id
                                         // .t1
                                         // .t2
                                         // .t3
                                         // .t4// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: unpack_event
// .unpack_event// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: unpack_event
// .unpack_event
// Corr struct for: unpack_sticky_event
//  : public unpack_sticky_event_base
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: unpack_sticky_event
// .unpack_sticky_event// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: unpack_sticky_event
// .unpack_sticky_event// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: unpack_sticky_event
// .unpack_sticky_event

/** END_CORR_STRUCT ***************************************************/

