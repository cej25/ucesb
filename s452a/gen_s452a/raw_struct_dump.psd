
/** BEGIN_INPUT_DEFINITION *********************************************
 *
 * All specifications as seen by the parser.
 *
 * Do not edit - automatically generated.
 */

/**********************************************************
 * Dump of all structures:
 */

class raw_event_wr_subsystem
{
  DATA12 id;
} ;
class raw_event_wr
{
  raw_event_wr_subsystem subsystem;
  DATA16 t[4];
} ;
class raw_event_board
{
  DATA8 id;
} ;
class raw_event_event_trigger_time
{
  DATA32 hi;
  DATA32 lo;
} ;
class raw_event_event_trigger
{
  raw_event_event_trigger_time time;
} ;
class raw_event_event
{
  raw_event_event_trigger trigger;
} ;
class raw_event_hit
{
  DATA16 pattern;
} ;
class raw_event_num_channels
{
  DATA32 fired;
} ;
class raw_event_num
{
  raw_event_num_channels channels;
} ;
class raw_event_channel_trigger_time
{
  DATA16 hi[16];
  DATA32 lo[16];
} ;
class raw_event_channel_trigger
{
  raw_event_channel_trigger_time time;
} ;
class raw_event_channel
{
  DATA8 id[16];
  DATA8 cfd[16];
  raw_event_channel_trigger trigger;
  DATA32 energy[16];
} ;
class raw_event : public raw_event_base
{
  raw_event_wr wr;
  raw_event_board board;
  raw_event_event event;
  raw_event_hit hit;
  raw_event_num num;
  DATA8 pileup[16];
  DATA8 overflow[16];
  raw_event_channel channel;
} ;
class raw_sticky : public raw_sticky_base
{
  ;
} ;
/**********************************************************/

/** END_INPUT_DEFINITION **********************************************/


/** BEGIN_MIRROR_STRUCT ************************************************
 *
 * Mirror (1 to 1) structure.
 *
 * Do not edit - automatically generated.
 */

#include "gen/default_mirror_define.hh"

#ifndef USER_DEF_raw_event_wr_subsystem
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_event_wr_subsystem)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(id);
  STRUCT_MIRROR_TYPE(DATA12) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(id);
  STRUCT_MIRROR_FCNS_DECL(raw_event_wr_subsystem);
};
#endif//USER_DEF_raw_event_wr_subsystem

#ifndef USER_DEF_raw_event_wr
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_event_wr)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(subsystem);
  STRUCT_MIRROR_TYPE(raw_event_wr_subsystem) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(subsystem);
  STRUCT_MIRROR_ITEM_CTRL(t);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(t__i0,,4);
  STRUCT_MIRROR_TYPE(DATA16) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(t[4]);
  STRUCT_MIRROR_FCNS_DECL(raw_event_wr);
};
#endif//USER_DEF_raw_event_wr

#ifndef USER_DEF_raw_event_board
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_event_board)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(id);
  STRUCT_MIRROR_TYPE(DATA8) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(id);
  STRUCT_MIRROR_FCNS_DECL(raw_event_board);
};
#endif//USER_DEF_raw_event_board

#ifndef USER_DEF_raw_event_event_trigger_time
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_event_event_trigger_time)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(hi);
  STRUCT_MIRROR_TYPE(DATA32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(hi);
  STRUCT_MIRROR_ITEM_CTRL(lo);
  STRUCT_MIRROR_TYPE(DATA32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(lo);
  STRUCT_MIRROR_FCNS_DECL(raw_event_event_trigger_time);
};
#endif//USER_DEF_raw_event_event_trigger_time

#ifndef USER_DEF_raw_event_event_trigger
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_event_event_trigger)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(time);
  STRUCT_MIRROR_TYPE(raw_event_event_trigger_time) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(time);
  STRUCT_MIRROR_FCNS_DECL(raw_event_event_trigger);
};
#endif//USER_DEF_raw_event_event_trigger

#ifndef USER_DEF_raw_event_event
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_event_event)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(trigger);
  STRUCT_MIRROR_TYPE(raw_event_event_trigger) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(trigger);
  STRUCT_MIRROR_FCNS_DECL(raw_event_event);
};
#endif//USER_DEF_raw_event_event

#ifndef USER_DEF_raw_event_hit
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_event_hit)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(pattern);
  STRUCT_MIRROR_TYPE(DATA16) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(pattern);
  STRUCT_MIRROR_FCNS_DECL(raw_event_hit);
};
#endif//USER_DEF_raw_event_hit

#ifndef USER_DEF_raw_event_num_channels
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_event_num_channels)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(fired);
  STRUCT_MIRROR_TYPE(DATA32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(fired);
  STRUCT_MIRROR_FCNS_DECL(raw_event_num_channels);
};
#endif//USER_DEF_raw_event_num_channels

#ifndef USER_DEF_raw_event_num
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_event_num)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(channels);
  STRUCT_MIRROR_TYPE(raw_event_num_channels) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(channels);
  STRUCT_MIRROR_FCNS_DECL(raw_event_num);
};
#endif//USER_DEF_raw_event_num

#ifndef USER_DEF_raw_event_channel_trigger_time
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_event_channel_trigger_time)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(hi);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(hi__i0,,16);
  STRUCT_MIRROR_TYPE(DATA16) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(hi[16]);
  STRUCT_MIRROR_ITEM_CTRL(lo);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(lo__i0,,16);
  STRUCT_MIRROR_TYPE(DATA32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(lo[16]);
  STRUCT_MIRROR_FCNS_DECL(raw_event_channel_trigger_time);
};
#endif//USER_DEF_raw_event_channel_trigger_time

#ifndef USER_DEF_raw_event_channel_trigger
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_event_channel_trigger)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(time);
  STRUCT_MIRROR_TYPE(raw_event_channel_trigger_time) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(time);
  STRUCT_MIRROR_FCNS_DECL(raw_event_channel_trigger);
};
#endif//USER_DEF_raw_event_channel_trigger

#ifndef USER_DEF_raw_event_channel
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_event_channel)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(id);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(id__i0,,16);
  STRUCT_MIRROR_TYPE(DATA8) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(id[16]);
  STRUCT_MIRROR_ITEM_CTRL(cfd);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(cfd__i0,,16);
  STRUCT_MIRROR_TYPE(DATA8) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(cfd[16]);
  STRUCT_MIRROR_ITEM_CTRL(trigger);
  STRUCT_MIRROR_TYPE(raw_event_channel_trigger) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(trigger);
  STRUCT_MIRROR_ITEM_CTRL(energy);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(energy__i0,,16);
  STRUCT_MIRROR_TYPE(DATA32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(energy[16]);
  STRUCT_MIRROR_FCNS_DECL(raw_event_channel);
};
#endif//USER_DEF_raw_event_channel

#ifndef USER_DEF_raw_event
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_event) : public STRUCT_MIRROR_BASE(raw_event_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(raw_event_base);
  STRUCT_MIRROR_ITEM_CTRL(wr);
  STRUCT_MIRROR_TYPE(raw_event_wr) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(wr);
  STRUCT_MIRROR_ITEM_CTRL(board);
  STRUCT_MIRROR_TYPE(raw_event_board) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(board);
  STRUCT_MIRROR_ITEM_CTRL(event);
  STRUCT_MIRROR_TYPE(raw_event_event) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(event);
  STRUCT_MIRROR_ITEM_CTRL(hit);
  STRUCT_MIRROR_TYPE(raw_event_hit) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(hit);
  STRUCT_MIRROR_ITEM_CTRL(num);
  STRUCT_MIRROR_TYPE(raw_event_num) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(num);
  STRUCT_MIRROR_ITEM_CTRL(pileup);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(pileup__i0,,16);
  STRUCT_MIRROR_TYPE(DATA8) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(pileup[16]);
  STRUCT_MIRROR_ITEM_CTRL(overflow);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(overflow__i0,,16);
  STRUCT_MIRROR_TYPE(DATA8) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(overflow[16]);
  STRUCT_MIRROR_ITEM_CTRL(channel);
  STRUCT_MIRROR_TYPE(raw_event_channel) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(channel);
  STRUCT_MIRROR_FCNS_DECL(raw_event);
};
#endif//USER_DEF_raw_event

#ifndef USER_DEF_raw_sticky
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_sticky) : public STRUCT_MIRROR_BASE(raw_sticky_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(raw_sticky_base);
  STRUCT_MIRROR_FCNS_DECL(raw_sticky);
};
#endif//USER_DEF_raw_sticky

#include "gen/default_mirror_undef.hh"


/** END_MIRROR_STRUCT *************************************************/


/** BEGIN_MIRROR_DECL_STRUCT *******************************************
 *
 * Mirror structure names.
 *
 * Do not edit - automatically generated.
 */

#include "gen/default_mirror_define.hh"

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_event_wr_subsystem);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_event_wr);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_event_board);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_event_event_trigger_time);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_event_event_trigger);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_event_event);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_event_hit);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_event_num_channels);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_event_num);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_event_channel_trigger_time);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_event_channel_trigger);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_event_channel);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_event);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_sticky);

#include "gen/default_mirror_undef.hh"


/** END_MIRROR_DECL_STRUCT ********************************************/


/** BEGIN_FUNCTION_CALL_PER_MEMBER *************************************
 *
 * Recursive function calls per member.
 *
 * Do not edit - automatically generated.
 */

#include "gen/default_fcncall_define.hh"

#ifndef USER_DEF_raw_event_wr_subsystem
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_event_wr_subsystem)::FCNCALL_NAME(raw_event_wr_subsystem)
{
  FCNCALL_INIT;
  // DATA12 id;
  {
  FCNCALL_SUBNAME("id");
  { FCNCALL_CALL_CTRL_WRAP(id,id.FCNCALL_CALL(id)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_raw_event_wr_subsystem

#ifndef USER_DEF_raw_event_wr
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_event_wr)::FCNCALL_NAME(raw_event_wr)
{
  FCNCALL_INIT;
  // raw_event_wr_subsystem subsystem;
  {
  FCNCALL_SUBNAME("subsystem");
  { FCNCALL_CALL_CTRL_WRAP(subsystem,subsystem.FCNCALL_CALL(subsystem)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA16 t[4];
  {
  FCNCALL_SUBNAME("t");
  FCNCALL_FOR(__i0,4)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(t__i0,,__i0,t[__i0].FCNCALL_CALL(t[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_raw_event_wr

#ifndef USER_DEF_raw_event_board
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_event_board)::FCNCALL_NAME(raw_event_board)
{
  FCNCALL_INIT;
  // DATA8 id;
  {
  FCNCALL_SUBNAME("id");
  { FCNCALL_CALL_CTRL_WRAP(id,id.FCNCALL_CALL(id)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_raw_event_board

#ifndef USER_DEF_raw_event_event_trigger_time
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_event_event_trigger_time)::FCNCALL_NAME(raw_event_event_trigger_time)
{
  FCNCALL_INIT;
  // DATA32 hi;
  {
  FCNCALL_SUBNAME("hi");
  { FCNCALL_CALL_CTRL_WRAP(hi,hi.FCNCALL_CALL(hi)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA32 lo;
  {
  FCNCALL_SUBNAME("lo");
  { FCNCALL_CALL_CTRL_WRAP(lo,lo.FCNCALL_CALL(lo)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_raw_event_event_trigger_time

#ifndef USER_DEF_raw_event_event_trigger
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_event_event_trigger)::FCNCALL_NAME(raw_event_event_trigger)
{
  FCNCALL_INIT;
  // raw_event_event_trigger_time time;
  {
  FCNCALL_SUBNAME("time");
  { FCNCALL_CALL_CTRL_WRAP(time,time.FCNCALL_CALL(time)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_raw_event_event_trigger

#ifndef USER_DEF_raw_event_event
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_event_event)::FCNCALL_NAME(raw_event_event)
{
  FCNCALL_INIT;
  // raw_event_event_trigger trigger;
  {
  FCNCALL_SUBNAME("trigger");
  { FCNCALL_CALL_CTRL_WRAP(trigger,trigger.FCNCALL_CALL(trigger)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_raw_event_event

#ifndef USER_DEF_raw_event_hit
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_event_hit)::FCNCALL_NAME(raw_event_hit)
{
  FCNCALL_INIT;
  // DATA16 pattern;
  {
  FCNCALL_SUBNAME("pattern");
  { FCNCALL_CALL_CTRL_WRAP(pattern,pattern.FCNCALL_CALL(pattern)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_raw_event_hit

#ifndef USER_DEF_raw_event_num_channels
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_event_num_channels)::FCNCALL_NAME(raw_event_num_channels)
{
  FCNCALL_INIT;
  // DATA32 fired;
  {
  FCNCALL_SUBNAME("fired");
  { FCNCALL_CALL_CTRL_WRAP(fired,fired.FCNCALL_CALL(fired)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_raw_event_num_channels

#ifndef USER_DEF_raw_event_num
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_event_num)::FCNCALL_NAME(raw_event_num)
{
  FCNCALL_INIT;
  // raw_event_num_channels channels;
  {
  FCNCALL_SUBNAME("channels");
  { FCNCALL_CALL_CTRL_WRAP(channels,channels.FCNCALL_CALL(channels)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_raw_event_num

#ifndef USER_DEF_raw_event_channel_trigger_time
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_event_channel_trigger_time)::FCNCALL_NAME(raw_event_channel_trigger_time)
{
  FCNCALL_INIT;
  // DATA16 hi[16];
  {
  FCNCALL_SUBNAME("hi");
  FCNCALL_FOR(__i0,16)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(hi__i0,,__i0,hi[__i0].FCNCALL_CALL(hi[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // DATA32 lo[16];
  {
  FCNCALL_SUBNAME("lo");
  FCNCALL_FOR(__i0,16)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(lo__i0,,__i0,lo[__i0].FCNCALL_CALL(lo[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_raw_event_channel_trigger_time

#ifndef USER_DEF_raw_event_channel_trigger
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_event_channel_trigger)::FCNCALL_NAME(raw_event_channel_trigger)
{
  FCNCALL_INIT;
  // raw_event_channel_trigger_time time;
  {
  FCNCALL_SUBNAME("time");
  { FCNCALL_CALL_CTRL_WRAP(time,time.FCNCALL_CALL(time)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_raw_event_channel_trigger

#ifndef USER_DEF_raw_event_channel
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_event_channel)::FCNCALL_NAME(raw_event_channel)
{
  FCNCALL_INIT;
  // DATA8 id[16];
  {
  FCNCALL_SUBNAME("id");
  FCNCALL_FOR(__i0,16)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(id__i0,,__i0,id[__i0].FCNCALL_CALL(id[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // DATA8 cfd[16];
  {
  FCNCALL_SUBNAME("cfd");
  FCNCALL_FOR(__i0,16)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(cfd__i0,,__i0,cfd[__i0].FCNCALL_CALL(cfd[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // raw_event_channel_trigger trigger;
  {
  FCNCALL_SUBNAME("trigger");
  { FCNCALL_CALL_CTRL_WRAP(trigger,trigger.FCNCALL_CALL(trigger)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA32 energy[16];
  {
  FCNCALL_SUBNAME("energy");
  FCNCALL_FOR(__i0,16)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(energy__i0,,__i0,energy[__i0].FCNCALL_CALL(energy[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_raw_event_channel

#ifndef USER_DEF_raw_event
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_event)::FCNCALL_NAME(raw_event)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(raw_event_base,FCNCALL_CLASS_NAME(raw_event_base)::FCNCALL_CALL_BASE());
  // raw_event_wr wr;
  {
  FCNCALL_SUBNAME("wr");
  { FCNCALL_CALL_CTRL_WRAP(wr,wr.FCNCALL_CALL(wr)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_event_board board;
  {
  FCNCALL_SUBNAME("board");
  { FCNCALL_CALL_CTRL_WRAP(board,board.FCNCALL_CALL(board)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_event_event event;
  {
  FCNCALL_SUBNAME("event");
  { FCNCALL_CALL_CTRL_WRAP(event,event.FCNCALL_CALL(event)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_event_hit hit;
  {
  FCNCALL_SUBNAME("hit");
  { FCNCALL_CALL_CTRL_WRAP(hit,hit.FCNCALL_CALL(hit)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_event_num num;
  {
  FCNCALL_SUBNAME("num");
  { FCNCALL_CALL_CTRL_WRAP(num,num.FCNCALL_CALL(num)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA8 pileup[16];
  {
  FCNCALL_SUBNAME("pileup");
  FCNCALL_FOR(__i0,16)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(pileup__i0,,__i0,pileup[__i0].FCNCALL_CALL(pileup[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // DATA8 overflow[16];
  {
  FCNCALL_SUBNAME("overflow");
  FCNCALL_FOR(__i0,16)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(overflow__i0,,__i0,overflow[__i0].FCNCALL_CALL(overflow[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // raw_event_channel channel;
  {
  FCNCALL_SUBNAME("channel");
  { FCNCALL_CALL_CTRL_WRAP(channel,channel.FCNCALL_CALL(channel)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_raw_event

#ifndef USER_DEF_raw_sticky
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_sticky)::FCNCALL_NAME(raw_sticky)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(raw_sticky_base,FCNCALL_CLASS_NAME(raw_sticky_base)::FCNCALL_CALL_BASE());
  FCNCALL_RET;
}
#endif//USER_DEF_raw_sticky

#include "gen/default_fcncall_undef.hh"


/** END_FUNCTION_CALL_PER_MEMBER **************************************/


/** BEGIN_CORR_STRUCT **************************************************
 *
 * Correlation structure.
 *
 * Do not edit - automatically generated.
 */

// Corr struct for: raw_event_wr_subsystem
// DATA12  .id
// DATA12 .id
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_wr_subsystem
  // DATA12 .id
// .raw_event_wr_subsystem/1/.id// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_wr_subsystem
// .raw_event_wr_subsystem// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_wr_subsystem
// .raw_event_wr_subsystem
// Corr struct for: raw_event_wr
// raw_event_wr_subsystem  .subsystem
  // DATA12  .id
// DATA16  .t[4]
// DATA12 .subsystem.id
// DATA16 .t[4]
// 
// size= 1  chunks=  5  mem=   5  line=10  total=50
// size= 4  chunks=  2  mem=   8  line=10  total=50
// size= 5  chunks=  1  mem=   5  line=6  total=30
// 
// corr structure: raw_event_wr
  // DATA12 .subsystem.id
  // DATA16 .t[4]
// .raw_event_wr/5/.subsystem/1/.id
                // .t/4/[4]// 
// size= 1  chunks=  4  mem=   4  line=8  total=32
// size= 4  chunks=  1  mem=   4  line=5  total=20
// 
// corr structure: raw_event_wr
  // DATA16 .t[4]
// .raw_event_wr/4/.t/4/[4]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_wr
// .raw_event_wr
// Corr struct for: raw_event_board
// DATA8  .id
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_board
// .raw_event_board// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_board
// .raw_event_board// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_board
// .raw_event_board
// Corr struct for: raw_event_event_trigger_time
// DATA32  .hi
  // ---
// DATA32  .lo
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_event_trigger_time
// .raw_event_event_trigger_time// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_event_trigger_time
// .raw_event_event_trigger_time// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_event_trigger_time
// .raw_event_event_trigger_time
// Corr struct for: raw_event_event_trigger
// raw_event_event_trigger_time  .time
  // DATA32  .hi
    // ---
  // DATA32  .lo
    // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_event_trigger
// .raw_event_event_trigger// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_event_trigger
// .raw_event_event_trigger// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_event_trigger
// .raw_event_event_trigger
// Corr struct for: raw_event_event
// raw_event_event_trigger  .trigger
  // raw_event_event_trigger_time  .time
    // DATA32  .hi
      // ---
    // DATA32  .lo
      // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_event
// .raw_event_event// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_event
// .raw_event_event// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_event
// .raw_event_event
// Corr struct for: raw_event_hit
// DATA16  .pattern
// DATA16 .pattern
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_hit
  // DATA16 .pattern
// .raw_event_hit/1/.pattern// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_hit
// .raw_event_hit// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_hit
// .raw_event_hit
// Corr struct for: raw_event_num_channels
// DATA32  .fired
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_num_channels
// .raw_event_num_channels// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_num_channels
// .raw_event_num_channels// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_num_channels
// .raw_event_num_channels
// Corr struct for: raw_event_num
// raw_event_num_channels  .channels
  // DATA32  .fired
    // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_num
// .raw_event_num// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_num
// .raw_event_num// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_num
// .raw_event_num
// Corr struct for: raw_event_channel_trigger_time
// DATA16  .hi[16]
// DATA32  .lo[16]
  // ---
// DATA16 .hi[16]
// 
// size= 1  chunks= 16  mem=  16  line=32  total=512
// size=16  chunks=  1  mem=  16  line=17  total=272
// 
// corr structure: raw_event_channel_trigger_time
  // DATA16 .hi[16]
// .raw_event_channel_trigger_time/16/.hi/16/[16]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_channel_trigger_time
// .raw_event_channel_trigger_time// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_channel_trigger_time
// .raw_event_channel_trigger_time
// Corr struct for: raw_event_channel_trigger
// raw_event_channel_trigger_time  .time
  // DATA16  .hi[16]
  // DATA32  .lo[16]
    // ---
// DATA16 .time.hi[16]
// 
// size= 1  chunks= 16  mem=  16  line=32  total=512
// size=16  chunks=  1  mem=  16  line=17  total=272
// 
// corr structure: raw_event_channel_trigger
  // DATA16 .time.hi[16]
// .raw_event_channel_trigger/16/.time/16/.hi/16/[16]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_channel_trigger
// .raw_event_channel_trigger// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_channel_trigger
// .raw_event_channel_trigger
// Corr struct for: raw_event_channel
// DATA8  .id[16]
  // ---
// DATA8  .cfd[16]
  // ---
// raw_event_channel_trigger  .trigger
  // raw_event_channel_trigger_time  .time
    // DATA16  .hi[16]
    // DATA32  .lo[16]
      // ---
// DATA32  .energy[16]
  // ---
// DATA16 .trigger.time.hi[16]
// 
// size= 1  chunks= 16  mem=  16  line=32  total=512
// size=16  chunks=  1  mem=  16  line=17  total=272
// 
// corr structure: raw_event_channel
  // DATA16 .trigger.time.hi[16]
// .raw_event_channel/16/.trigger/16/.time/16/.hi/16/[16]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_channel
// .raw_event_channel// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_channel
// .raw_event_channel
// Corr struct for: raw_event
//  : public raw_event_base
// ---
// raw_event_wr  .wr
  // raw_event_wr_subsystem  .subsystem
    // DATA12  .id
  // DATA16  .t[4]
// raw_event_board  .board
  // DATA8  .id
    // ---
// raw_event_event  .event
  // raw_event_event_trigger  .trigger
    // raw_event_event_trigger_time  .time
      // DATA32  .hi
        // ---
      // DATA32  .lo
        // ---
// raw_event_hit  .hit
  // DATA16  .pattern
// raw_event_num  .num
  // raw_event_num_channels  .channels
    // DATA32  .fired
      // ---
// DATA8  .pileup[16]
  // ---
// DATA8  .overflow[16]
  // ---
// raw_event_channel  .channel
  // DATA8  .id[16]
    // ---
  // DATA8  .cfd[16]
    // ---
  // raw_event_channel_trigger  .trigger
    // raw_event_channel_trigger_time  .time
      // DATA16  .hi[16]
      // DATA32  .lo[16]
        // ---
  // DATA32  .energy[16]
    // ---
// DATA12 .wr.subsystem.id
// DATA16 .wr.t[4]
// DATA16 .hit.pattern
// DATA16 .channel.trigger.time.hi[16]
// 
// size= 1  chunks= 22  mem=  22  line=44  total=968
// size= 4  chunks= 19  mem=  76  line=95  total=2090
// size= 5  chunks= 18  mem=  90  line=108  total=2376
// size=16  chunks=  3  mem=  48  line=51  total=1122
// size=22  chunks=  1  mem=  22  line=23  total=506
// 
// corr structure: raw_event
  // DATA12 .wr.subsystem.id
  // DATA16 .wr.t[4]
  // DATA16 .hit.pattern
  // DATA16 .channel.trigger.time.hi[16]
// .raw_event/22/.wr/5/.subsystem/1/.id
                    // .t/4/[4]
              // .hit/1/.pattern
              // .channel/16/.trigger/16/.time/16/.hi/16/[16]// 
// size= 1  chunks=  4  mem=   4  line=8  total=32
// size= 4  chunks=  1  mem=   4  line=5  total=20
// 
// corr structure: raw_event
  // DATA16 .wr.t[4]
// .raw_event/4/.wr/4/.t/4/[4]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event
// .raw_event
// Corr struct for: raw_sticky
//  : public raw_sticky_base
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_sticky
// .raw_sticky// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_sticky
// .raw_sticky// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_sticky
// .raw_sticky

/** END_CORR_STRUCT ***************************************************/

